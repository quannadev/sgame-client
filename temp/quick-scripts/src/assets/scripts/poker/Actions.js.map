{"version":3,"sources":["assets/scripts/poker/Actions.js"],"names":["cc","Class","VozBaseComponent","properties","NodeRaise","Node","Check","Call","Fold","Raise","Bet","SliderRaise","Slider","lb_Current","Label","_distance","_current","_max","lb_bettingChip","onEnable","active","initSlider","distance","current","max","SmartFoxSDK","PokerController","QuickJoinRoomConfig","betChip","updateSlider","currentProcess","progress","string","Utils","formatCurrency","eventPlus","eventSub","eventAllIn","onSliderRaise","slider","process","Math","floor","toFixed","addDotToNumber","hideAllActions","showCallRaise","betchip","currentMyBet","undefined","setLabelBettingChip","showCheck","chip","ActionBet","handleRaiseRequest","ActionCheck","ActionCall","callRequest","PokerRequest","CallRequest","setRoomId","roomId","ZoneInstance","send","toSRequest","ActionSliderRaise","isActive","ActionRaise","ActionAllIn","allInRequest","AllInRequest","ActionFold","foldRequest","FoldRequest","raise_1_2Pot","m_tableInfo","m_potChip","raisePot","raiseRequest","RaiseRequest","setBetChip"],"mappings":";;;;;;AAAAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,gBADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,SAAS,EAAEJ,EAAE,CAACK,IADN;AAERC,IAAAA,KAAK,EAAEN,EAAE,CAACK,IAFF;AAGRE,IAAAA,IAAI,EAAEP,EAAE,CAACK,IAHD;AAIRG,IAAAA,IAAI,EAAER,EAAE,CAACK,IAJD;AAKRI,IAAAA,KAAK,EAAET,EAAE,CAACK,IALF;AAMRK,IAAAA,GAAG,EAAEV,EAAE,CAACK,IANA;AAORM,IAAAA,WAAW,EAAEX,EAAE,CAACY,MAPR;AAQRC,IAAAA,UAAU,EAAEb,EAAE,CAACc,KARP;AASRC,IAAAA,SAAS,EAAE,GATH;AAURC,IAAAA,QAAQ,EAAE,CAVF;AAWRC,IAAAA,IAAI,EAAE,CAXE;AAYRC,IAAAA,cAAc,EAAElB,EAAE,CAACc;AAZX,GAHP;AAiBLK,EAAAA,QAjBK,sBAiBK;AACN,SAAKf,SAAL,CAAegB,MAAf,GAA0B,KAA1B;AACA,SAAKd,KAAL,CAAWc,MAAX,GAA0B,KAA1B;AACA,SAAKb,IAAL,CAAUa,MAAV,GAA0B,KAA1B;AACA,SAAKZ,IAAL,CAAUY,MAAV,GAA0B,KAA1B;AACA,SAAKX,KAAL,CAAWW,MAAX,GAA0B,KAA1B;AACA,SAAKV,GAAL,CAASU,MAAT,GAA0B,KAA1B;AACH,GAxBI;AAyBLC,EAAAA,UAzBK,sBAyBMC,QAzBN,EAyBgBC,OAzBhB,EAyByBC,GAzBzB,EAyB6B;AAC9B,QAAGF,QAAQ,IAAI,CAAf,EACIA,QAAQ,GAAGG,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDC,OAA3D;AACJ,SAAKX,IAAL,GAAYO,GAAZ;AACA,SAAKT,SAAL,GAAiBO,QAAjB;AACA,SAAKN,QAAL,GAAgBO,OAAhB;AACA,SAAKM,YAAL;AACH,GAhCI;AAiCLA,EAAAA,YAjCK,0BAiCS;AACV,QAAIC,cAAc,GAAG,KAAKd,QAAL,GAAgB,KAAKC,IAA1C;AACA,SAAKN,WAAL,CAAiBoB,QAAjB,GAA4BD,cAA5B;AACA,SAAKjB,UAAL,CAAgBmB,MAAhB,GAAyBC,KAAK,CAACC,cAAN,CAAqB,KAAKlB,QAA1B,CAAzB;AACH,GArCI;AAsCLmB,EAAAA,SAtCK,uBAsCM;AACP,SAAKnB,QAAL,IAAiB,KAAKD,SAAtB;;AACA,QAAG,KAAKC,QAAL,GAAgB,KAAKC,IAAxB,EAA6B;AACzB,WAAKD,QAAL,GAAgB,KAAKC,IAArB;AACH;;AACD,SAAKY,YAAL;AACH,GA5CI;AA6CLO,EAAAA,QA7CK,sBA6CK;AACN,SAAKpB,QAAL,IAAiB,KAAKD,SAAtB;;AACA,QAAG,KAAKC,QAAL,GAAgB,CAAnB,EAAqB;AACjB,WAAKA,QAAL,GAAgB,CAAhB;AACH;;AACD,SAAKa,YAAL;AACH,GAnDI;AAoDLQ,EAAAA,UApDK,wBAoDO;AACR,SAAKrB,QAAL,GAAgB,KAAKC,IAArB;AACA,SAAKY,YAAL;AACH,GAvDI;AAwDLS,EAAAA,aAxDK,yBAwDSC,MAxDT,EAwDgB;AACjB,QAAIC,OAAO,GAAGD,MAAM,CAACR,QAArB;AACA,SAAKf,QAAL,GAAgByB,IAAI,CAACC,KAAL,CAAWF,OAAO,CAACG,OAAR,CAAgB,CAAhB,IAAqB,KAAK1B,IAArC,CAAhB;AACA,SAAKJ,UAAL,CAAgBmB,MAAhB,GAAyBC,KAAK,CAACW,cAAN,CAAqB,KAAK5B,QAA1B,CAAzB;AACH,GA5DI;AA6DL6B,EAAAA,cA7DK,4BA6DW;AACZ,SAAKzC,SAAL,CAAegB,MAAf,GAAwB,KAAxB;AACA,SAAKd,KAAL,CAAWc,MAAX,GAAoB,KAApB;AACA,SAAKb,IAAL,CAAUa,MAAV,GAAmB,KAAnB;AACA,SAAKZ,IAAL,CAAUY,MAAV,GAAmB,KAAnB;AACA,SAAKX,KAAL,CAAWW,MAAX,GAAoB,KAApB;AACA,SAAKV,GAAL,CAASU,MAAT,GAAkB,KAAlB;AACH,GApEI;AAqEL0B,EAAAA,aArEK,yBAqESC,OArET,EAqEkBvB,GArElB,EAqEuBwB,YArEvB,EAqEoC;AACrC,SAAKzC,IAAL,CAAUa,MAAV,GAAmB,IAAnB;AACA,SAAKZ,IAAL,CAAUY,MAAV,GAAmB,IAAnB;AACA,SAAKX,KAAL,CAAWW,MAAX,GAAoB,IAApB;AACA,SAAKV,GAAL,CAASU,MAAT,GAAkB,KAAlB;;AACA,QAAG2B,OAAO,IAAIE,SAAd,EAAwB;AACpB,WAAKC,mBAAL,CAAyBH,OAAO,GAAGC,YAAnC;;AACA,UAAGxB,GAAH,EAAO;AACH,aAAKH,UAAL,CAAgBI,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDC,OAAhE,EAAyEmB,OAAzE,EAAkFvB,GAAlF;AACH;AACJ;AACJ,GAhFI;AAiFL2B,EAAAA,SAjFK,qBAiFKJ,OAjFL,EAiFcvB,GAjFd,EAiFmBwB,YAjFnB,EAiFgC;AACjC,SAAK1C,KAAL,CAAWc,MAAX,GAAoB,IAApB;AACA,SAAKZ,IAAL,CAAUY,MAAV,GAAmB,IAAnB;AACA,SAAKX,KAAL,CAAWW,MAAX,GAAoB,IAApB;AACA,SAAKV,GAAL,CAASU,MAAT,GAAkB,IAAlB;;AACA,QAAG2B,OAAO,IAAIE,SAAd,EAAwB;AACpB,WAAKC,mBAAL,CAAyBH,OAAO,GAAGC,YAAnC;;AACA,UAAGxB,GAAH,EAAO;AACH,aAAKH,UAAL,CAAgBI,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDC,OAAhE,EAAyEmB,OAAzE,EAAkFvB,GAAlF;AACH;AACJ;AACJ,GA5FI;AA6FL0B,EAAAA,mBA7FK,+BA6FeE,IA7Ff,EA6FoB;AACrB,SAAKlC,cAAL,CAAoBc,MAApB,GAA6BC,KAAK,CAACC,cAAN,CAAqBkB,IAAI,CAACT,OAAL,CAAa,CAAb,CAArB,CAA7B;AACH,GA/FI;AAgGLU,EAAAA,SAhGK,uBAgGM;AACP,SAAKC,kBAAL,CAAwB7B,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDC,OAAxE;AACH,GAlGI;AAmGL2B,EAAAA,WAnGK,yBAmGQ;AACT,SAAKD,kBAAL,CAAwB,CAAxB;AACH,GArGI;AAsGLE,EAAAA,UAtGK,wBAsGO;AACR,QAAIC,WAAW,GAAG,IAAIC,YAAY,CAACC,WAAjB,GAA+BC,SAA/B,CAAyCnC,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDkC,MAAzF,CAAlB;AACApC,IAAAA,WAAW,CAACC,eAAZ,CAA4BoC,YAA5B,CAAyCC,IAAzC,CAA8CN,WAAW,CAACO,UAAZ,EAA9C;AACH,GAzGI;AA0GLC,EAAAA,iBA1GK,+BA0Gc;AACf,QAAIC,QAAQ,GAAG,KAAK9D,SAAL,CAAegB,MAA9B;AACA,SAAKhB,SAAL,CAAegB,MAAf,GAAwB,CAAC8C,QAAzB;AACH,GA7GI;AA8GLC,EAAAA,WA9GK,yBA8GQ;AACT,SAAKF,iBAAL;AACA,SAAKX,kBAAL,CAAwB,KAAKtC,QAA7B;AACH,GAjHI;AAkHLoD,EAAAA,WAlHK,yBAkHQ;AACT,QAAIC,YAAY,GAAG,IAAIX,YAAY,CAACY,YAAjB,GAAgCV,SAAhC,CAA0CnC,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDkC,MAA1F,CAAnB;AACApC,IAAAA,WAAW,CAACC,eAAZ,CAA4BoC,YAA5B,CAAyCC,IAAzC,CAA8CM,YAAY,CAACL,UAAb,EAA9C;AACH,GArHI;AAsHLO,EAAAA,UAtHK,wBAsHO;AACR,QAAIC,WAAW,GAAG,IAAId,YAAY,CAACe,WAAjB,GAA+Bb,SAA/B,CAAyCnC,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDkC,MAAzF,CAAlB;AACApC,IAAAA,WAAW,CAACC,eAAZ,CAA4BoC,YAA5B,CAAyCC,IAAzC,CAA8CS,WAAW,CAACR,UAAZ,EAA9C;AACH,GAzHI;AA0HLU,EAAAA,YA1HK,0BA0HS;AACV,SAAKpB,kBAAL,CAAwB7B,WAAW,CAACC,eAAZ,CAA4BiD,WAA5B,CAAwCC,SAAxC,GAAoD,CAA5E;AACH,GA5HI;AA6HLC,EAAAA,QA7HK,sBA6HK;AACN,SAAKvB,kBAAL,CAAwB7B,WAAW,CAACC,eAAZ,CAA4BiD,WAA5B,CAAwCC,SAAhE;AACH,GA/HI;AAgILtB,EAAAA,kBAhIK,8BAgIcF,IAhId,EAgImB;AACpB,QAAI0B,YAAY,GAAG,IAAIpB,YAAY,CAACqB,YAAjB,GAAgCnB,SAAhC,CAA0CnC,WAAW,CAACC,eAAZ,CAA4BC,mBAA5B,CAAgDkC,MAA1F,EAAkGmB,UAAlG,CAA6G5B,IAA7G,CAAnB;AACA3B,IAAAA,WAAW,CAACC,eAAZ,CAA4BoC,YAA5B,CAAyCC,IAAzC,CAA8Ce,YAAY,CAACd,UAAb,EAA9C;AACH;AAnII,CAAT","sourceRoot":"/","sourcesContent":["cc.Class({\n    extends: cc.VozBaseComponent,\n\n    properties: {\n        NodeRaise: cc.Node,\n        Check: cc.Node,\n        Call: cc.Node,\n        Fold: cc.Node,\n        Raise: cc.Node,\n        Bet: cc.Node,\n        SliderRaise: cc.Slider,\n        lb_Current: cc.Label,\n        _distance: 100,\n        _current: 0,\n        _max: 0,\n        lb_bettingChip: cc.Label\n    },\n    onEnable(){\n        this.NodeRaise.active   = false;\n        this.Check.active       = false;\n        this.Call.active        = false;\n        this.Fold.active        = false;\n        this.Raise.active       = false;\n        this.Bet.active         = false;\n    },\n    initSlider(distance, current, max){\n        if(distance <= 0)\n            distance = SmartFoxSDK.PokerController.QuickJoinRoomConfig.betChip;\n        this._max = max;\n        this._distance = distance;\n        this._current = current;\n        this.updateSlider();\n    },\n    updateSlider(){\n        let currentProcess = this._current / this._max;\n        this.SliderRaise.progress = currentProcess;\n        this.lb_Current.string = Utils.formatCurrency(this._current);\n    },\n    eventPlus(){\n        this._current += this._distance;\n        if(this._current > this._max){\n            this._current = this._max;\n        }\n        this.updateSlider();\n    },\n    eventSub(){\n        this._current -= this._distance;\n        if(this._current < 0){\n            this._current = 0;\n        }\n        this.updateSlider();\n    },\n    eventAllIn(){\n        this._current = this._max;\n        this.updateSlider();\n    },\n    onSliderRaise(slider){\n        let process = slider.progress;\n        this._current = Math.floor(process.toFixed(1) * this._max);\n        this.lb_Current.string = Utils.addDotToNumber(this._current);\n    },\n    hideAllActions(){\n        this.NodeRaise.active = false;\n        this.Check.active = false;\n        this.Call.active = false;\n        this.Fold.active = false;\n        this.Raise.active = false;\n        this.Bet.active = false;\n    },\n    showCallRaise(betchip, max, currentMyBet){\n        this.Call.active = true;\n        this.Fold.active = true;\n        this.Raise.active = true;\n        this.Bet.active = false;\n        if(betchip != undefined){\n            this.setLabelBettingChip(betchip + currentMyBet);\n            if(max){\n                this.initSlider(SmartFoxSDK.PokerController.QuickJoinRoomConfig.betChip, betchip, max)\n            }\n        }\n    },\n    showCheck(betchip, max, currentMyBet){\n        this.Check.active = true;\n        this.Fold.active = true;\n        this.Raise.active = true;\n        this.Bet.active = true;\n        if(betchip != undefined){\n            this.setLabelBettingChip(betchip + currentMyBet);\n            if(max){\n                this.initSlider(SmartFoxSDK.PokerController.QuickJoinRoomConfig.betChip, betchip, max)\n            }\n        }\n    },\n    setLabelBettingChip(chip){\n        this.lb_bettingChip.string = Utils.formatCurrency(chip.toFixed(0));\n    },\n    ActionBet(){\n        this.handleRaiseRequest(SmartFoxSDK.PokerController.QuickJoinRoomConfig.betChip);\n    },\n    ActionCheck(){\n        this.handleRaiseRequest(0);\n    },\n    ActionCall(){\n        let callRequest = new PokerRequest.CallRequest().setRoomId(SmartFoxSDK.PokerController.QuickJoinRoomConfig.roomId);\n        SmartFoxSDK.PokerController.ZoneInstance.send(callRequest.toSRequest());\n    },\n    ActionSliderRaise(){\n        let isActive = this.NodeRaise.active;\n        this.NodeRaise.active = !isActive;\n    },\n    ActionRaise(){\n        this.ActionSliderRaise();\n        this.handleRaiseRequest(this._current);\n    },\n    ActionAllIn(){\n        let allInRequest = new PokerRequest.AllInRequest().setRoomId(SmartFoxSDK.PokerController.QuickJoinRoomConfig.roomId);\n        SmartFoxSDK.PokerController.ZoneInstance.send(allInRequest.toSRequest());\n    },\n    ActionFold(){\n        let foldRequest = new PokerRequest.FoldRequest().setRoomId(SmartFoxSDK.PokerController.QuickJoinRoomConfig.roomId);\n        SmartFoxSDK.PokerController.ZoneInstance.send(foldRequest.toSRequest());\n    },\n    raise_1_2Pot(){\n        this.handleRaiseRequest(SmartFoxSDK.PokerController.m_tableInfo.m_potChip / 2);\n    },\n    raisePot(){\n        this.handleRaiseRequest(SmartFoxSDK.PokerController.m_tableInfo.m_potChip);\n    },\n    handleRaiseRequest(chip){\n        let raiseRequest = new PokerRequest.RaiseRequest().setRoomId(SmartFoxSDK.PokerController.QuickJoinRoomConfig.roomId).setBetChip(chip);\n        SmartFoxSDK.PokerController.ZoneInstance.send(raiseRequest.toSRequest());\n    }\n});\n"]}