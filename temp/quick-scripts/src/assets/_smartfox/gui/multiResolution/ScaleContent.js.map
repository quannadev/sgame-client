{"version":3,"sources":["assets/_smartfox/gui/multiResolution/ScaleContent.js"],"names":["cc","_decorator","ccclass","property","ContentAdapter","onLoad","srcScaleForShowAll","Math","min","view","getCanvasSize","width","node","height","realWidth","realHeight","_updateAllChildNodeWidget","parentNode","widget","getComponent","Widget","updateAlignment","childrenCount","children","forEach","childNode","Component"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAA8BA,EAAE,CAACC,UAAjC;AAAA,IAAQC,OAAR,kBAAQA,OAAR;AAAA,IAAiBC,QAAjB,kBAAiBA,QAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEqBC,iBADpBF;;;;;;;;;SAEGG,SAAA,kBAAS;AAEL;AACA,QAAIC,kBAAkB,GAAGC,IAAI,CAACC,GAAL,CAASR,EAAE,CAACS,IAAH,CAAQC,aAAR,GAAwBC,KAAxB,GAAgC,KAAKC,IAAL,CAAUD,KAAnD,EAA0DX,EAAE,CAACS,IAAH,CAAQC,aAAR,GAAwBG,MAAxB,GAAiC,KAAKD,IAAL,CAAUC,MAArG,CAAzB;AACA,QAAIC,SAAS,GAAG,KAAKF,IAAL,CAAUD,KAAV,GAAkBL,kBAAlC;AACA,QAAIS,UAAU,GAAG,KAAKH,IAAL,CAAUC,MAAV,GAAmBP,kBAApC,CALK,CAOL;;AACA,SAAKM,IAAL,CAAUD,KAAV,GAAkB,KAAKC,IAAL,CAAUD,KAAV,IAAmBX,EAAE,CAACS,IAAH,CAAQC,aAAR,GAAwBC,KAAxB,GAAgCG,SAAnD,CAAlB;AACA,SAAKF,IAAL,CAAUC,MAAV,GAAmB,KAAKD,IAAL,CAAUC,MAAV,IAAoBb,EAAE,CAACS,IAAH,CAAQC,aAAR,GAAwBG,MAAxB,GAAiCE,UAArD,CAAnB,CATK,CAWL;;AACA,SAAKC,yBAAL,CAA+B,KAAKJ,IAApC;AACH;;SAEDI,4BAAA,mCAA0BC,UAA1B,EAAsC;AAAA;;AAClC,QAAIA,UAAU,IAAI,IAAlB,EAAwB;AACpB;AACH;;AACD,QAAIC,MAAM,GAAGD,UAAU,CAACE,YAAX,CAAwBnB,EAAE,CAACoB,MAA3B,CAAb;;AACA,QAAIF,MAAM,IAAI,IAAd,EAAoB;AAChBA,MAAAA,MAAM,CAACG,eAAP;AACH;;AACD,QAAIJ,UAAU,CAACK,aAAX,KAA6B,CAAjC,EAAoC;AAChC;AACH;;AACDL,IAAAA,UAAU,CAACM,QAAX,CAAoBC,OAApB,CAA4B,UAACC,SAAD,EAAe;AACvC,MAAA,KAAI,CAACT,yBAAL,CAA+BS,SAA/B;AACH,KAFD;AAGH;;;EA9BuCzB,EAAE,CAAC0B","sourceRoot":"/","sourcesContent":["/**\n *                  ___====-_  _-====___\n *            _--^^^#####//      \\\\#####^^^--_\n *         _-^##########// (    ) \\\\##########^-_\n *        -############//  |\\^^/|  \\\\############-\n *      _/############//   (@::@)   \\\\############\\_\n *     /#############((     \\\\//     ))#############\\\n *    -###############\\\\    (oo)    //###############-\n *   -#################\\\\  / VV \\  //#################-\n *  -###################\\\\/      \\//###################-\n * _#/|##########/\\######(   /\\   )######/\\##########|\\#_\n * |/ |#/\\#/\\#/\\/  \\#/\\##\\  |  |  /##/\\#/  \\/\\#/\\#/\\#| \\|\n * `  |/  V  V  `   V  \\#\\| |  | |/#/  V   '  V  V  \\|  '\n *    `   `  `      `   / | |  | | \\   '      '  '   '\n *                     (  | |  | |  )\n *                    __\\ | |  | | /__\n *                   (vvv(VVV)(VVV)vvv)\n *                        神兽保佑\n *                       代码无BUG!\n */\nconst { ccclass, property } = cc._decorator;\n\n/**\n * @classdesc  游戏主内容节点自适应所有分辨率的脚本\n * @author caizhitao\n * @version 0.1.0\n * @since 2018-11-30\n * @description\n *\n * 用法：\n *      1. 将本组件挂载在节点上即可\n *\n * 适配原理：\n *      1. 将游戏主内容节点的宽高调整为画布的大小，以进行Size适配\n *\n * 注意：\n *      1. 挂载这个脚本的节点不能加入Widget组件，不然这个适配是没有效果的\n *      2. 目前只支持 SHOW_ALL 模式下的背景缩放适配，不支持其他模式的背景缩放\n *\n *  @example\n ```\n // e.g.\n // 代码中设置 SHOW_ALL 模式的参考代码\n cc.view.setDesignResolutionSize(720, 1280, cc.ResolutionPolicy.SHOW_ALL);\n\n // 或者 Canvas 组件中，同时勾选 Fit Width 和 Fit Height\n ```\n */\n@ccclass\nexport default class ContentAdapter extends cc.Component {\n    onLoad() {\n\n        // 1. 先找到 SHOW_ALL 模式适配之后，本节点的实际宽高以及初始缩放值\n        let srcScaleForShowAll = Math.min(cc.view.getCanvasSize().width / this.node.width, cc.view.getCanvasSize().height / this.node.height);\n        let realWidth = this.node.width * srcScaleForShowAll;\n        let realHeight = this.node.height * srcScaleForShowAll;\n\n        // 2. 基于第一步的数据，再做节点宽高适配\n        this.node.width = this.node.width * (cc.view.getCanvasSize().width / realWidth);\n        this.node.height = this.node.height * (cc.view.getCanvasSize().height / realHeight);\n\n        // // 3. 因为本节点的宽高发生了改变，所以要手动更新剩下子节点的宽高\n        this._updateAllChildNodeWidget(this.node);\n    }\n\n    _updateAllChildNodeWidget(parentNode) {\n        if (parentNode == null) {\n            return;\n        }\n        let widget = parentNode.getComponent(cc.Widget);\n        if (widget != null) {\n            widget.updateAlignment();\n        }\n        if (parentNode.childrenCount === 0) {\n            return;\n        }\n        parentNode.children.forEach((childNode) => {\n            this._updateAllChildNodeWidget(childNode);\n        });\n    }\n}\n"]}