{"version":3,"sources":["assets/_smartfox/gui/multiResolution/MultiResolutionCompat.js"],"names":["cc","_decorator","ccclass","property","MultiResolutionCompat","onLoad","view","setDesignResolutionSize","DEFAULT_RESOLUTION_WIDTH","DEFAULT_RESOLUTION_HEIGHT","ResolutionPolicy","SHOW_ALL","getShowAllModeScale","Math","min","getCanvasSize","width","height","getShowAllModeRealHeight","getShowAllModeRealWidth","getShowAllModeVerticalBorderHeight","getShowAllModeHorizontalBorderWidth","getShowAllModeNodePositionCloseToBottom","nodePosInDesign","srcScaleForShowAll","bottomBorderHeightInCanvas","srcNodePosYInCanvas","y","finalNodePosYInCanvas","nodePosYInDesign","v2","x","convertNodePosInDesignToNodePosInCanvas","sub","convertNodePosInCanvasToNodePosInDesign","nodePosInCanvas","div","convertWidthInDesignToWidthInCanvas","widthInDesign","convertWidthInCanvasToWidthInDesign","widthInCanvas","convertHeightInDesignToHeightInCanvas","heightInDesign","convertHeightInCanvasToHeightInDesign","heightIncanvas","Component"],"mappings":"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","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n/**\n * 未完成\n */\n@ccclass\nexport default class MultiResolutionCompat extends cc.Component {\n    static DEFAULT_RESOLUTION_WIDTH = 720;\n    static DEFAULT_RESOLUTION_HEIGHT = 1280;\n\n    onLoad() {\n        // 第一种：全屏拉伸，iPhoneX或平板类的会拉伸变形\n        // cc.view.setDesignResolutionSize(720, 1280, cc.ResolutionPolicy.EXACT_FIT);\n\n        // 第二种：1比1显示，iPhoneX上下有黑边、平板左右有黑边，但不会变形（推荐）\n        // cc.view.setDesignResolutionSize(720, 1280, cc.ResolutionPolicy.EXACT_FIT);\n        // var canvasSize = cc.view.getCanvasSize();\n        // var proportion = canvasSize.width / canvasSize.height;\n        // if (proportion >= 0.6) {\n        //     cc.view.setDesignResolutionSize(720, 1280, cc.ResolutionPolicy.FIXED_HEIGHT);\n        // } else {\n        //     cc.view.setDesignResolutionSize(720, 1280, cc.ResolutionPolicy.FIXED_WIDTH);\n        // }\n\n        // // 第三种：按照官方说明的设计分辨率宽高比和屏幕分辨率宽高比来适配\n        // let canvasSize = cc.view.getCanvasSize();\n        // let screenResolution = canvasSize.width / canvasSize.height;\n        // let designResolutionWidth = 720;\n        // let designResolutionHeight = 1280;\n        // let designResolution = designResolutionWidth / designResolutionHeight;\n        // if (CC_DEBUG) {\n        //     cc.log(`设计分辨率（${designResolutionWidth}x${designResolutionHeight}) 宽高比：${designResolution}`);\n        //     cc.log(`屏幕分辨率（${canvasSize.width}x${canvasSize.height}) 宽高比：${screenResolution}`);\n        //     if (designResolution > screenResolution) {\n        //         cc.log(\n        //             `设计分辨率缩放至于屏幕分辨率等高后的分辨率 (${designResolutionWidth * (canvasSize.height / designResolutionHeight)}x${\n        //                 canvasSize.height\n        //             })`\n        //         );\n        //         cc.log(\"设计分辨率宽高比大于屏幕分辨率，按照官方说法，此时应该采用(Fit Height)，实际应用后，会裁剪掉游戏左右两边的部分内容\");\n        //     } else if (designResolution < screenResolution) {\n        //         cc.log(\n        //             `设计分辨率缩放至于屏幕分辨率等宽后的分辨率 (${canvasSize.width}x${designResolutionHeight *\n        //                 (canvasSize.width / designResolutionWidth)})`\n        //         );\n        //         cc.log(\"设计分辨率宽高比小于屏幕分辨率，按照官方说法，此时应该采用(Fit Width)，实际应用后，会裁剪掉游戏上下两边的部分内容\");\n        //     } else {\n        //         cc.log(\"设计分辨率宽高比等于屏幕分辨率\");\n        //     }\n        // }\n        // if (designResolution > screenResolution) {\n        //     cc.view.setDesignResolutionSize(\n        //         designResolutionWidth,\n        //         designResolutionHeight,\n        //         cc.ResolutionPolicy.FIXED_HEIGHT\n        //     );\n        // } else {\n        //     cc.view.setDesignResolutionSize(\n        //         designResolutionWidth,\n        //         designResolutionHeight,\n        //         cc.ResolutionPolicy.FIXED_WIDTH\n        //     );\n        // }\n\n        // 第四种：直接等比例缩放至屏幕上宽高最短的那条边，后续控制背景拉伸\n        cc.view.setDesignResolutionSize(\n            MultiResolutionCompat.DEFAULT_RESOLUTION_WIDTH,\n            MultiResolutionCompat.DEFAULT_RESOLUTION_HEIGHT,\n            cc.ResolutionPolicy.SHOW_ALL\n        );\n\n        // this.node.scale = 1.1\n        // this.node.position = cc.v2(0, -100)\n        // this.node.position = this.node.position.sub(cc.v2(0, 100))\n        // if (CC_DEBUG) {\n        //     cc.log(`屏幕分辨率: ${cc.view.getCanvasSize().width} x ${cc.view.getCanvasSize().height}`);\n        //     cc.log(`视图窗口可见区域分辨率: ${cc.view.getVisibleSize().width} x ${cc.view.getVisibleSize().height}`);\n        //     cc.log(`视图中边框尺寸: ${cc.view.getFrameSize().width} x ${cc.view.getFrameSize().height}`);\n        //     cc.log(`设备或浏览器像素比例: ${cc.view.getDevicePixelRatio()}`);\n        //     cc.log(\"调整前\");\n        //     cc.log(`节点宽高: ${this.node.width} x ${this.node.height}`);\n        //     cc.log(`节点缩放: ${this.node.scaleX} x ${this.node.scaleY}`);\n        // }\n        // if (cc.view.getCanvasSize().width > cc.view.getCanvasSize().height) {\n        //     this.backgroundNode.scale = cc.view.getCanvasSize().width / 720;\n        // } else {\n        //     this.backgroundNode.scale = cc.view.getCanvasSize().height / 1280;\n        // }\n        // if (CC_DEBUG) {\n        //     cc.log(\"调整后\");\n        //     cc.log(`节点宽高: ${this.node.width} x ${this.node.height}`);\n        //     cc.log(`节点缩放: ${this.node.scaleX} x ${this.node.scaleY}`);\n        // }\n    }\n\n    /**\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，设计分辨率做出的缩放值\n     */\n    static getShowAllModeScale() {\n        return Math.min(\n            cc.view.getCanvasSize().width / this.DEFAULT_RESOLUTION_WIDTH,\n            cc.view.getCanvasSize().height / this.DEFAULT_RESOLUTION_HEIGHT\n        );\n    }\n\n    /**\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，设计分辨率下的界面在实际画布中的实际高度\n     */\n    static getShowAllModeRealHeight() {\n        return this.DEFAULT_RESOLUTION_HEIGHT * this.getShowAllModeScale();\n    }\n\n    /**\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，设计分辨率下的界面在实际画布中的实际宽度\n     */\n    static getShowAllModeRealWidth() {\n        return this.DEFAULT_RESOLUTION_WIDTH * this.getShowAllModeScale();\n    }\n\n    /**\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，上下边界的黑边之和在实际画布中的长度\n     */\n    static getShowAllModeVerticalBorderHeight() {\n        return cc.view.getCanvasSize().height - this.getShowAllModeRealHeight();\n    }\n\n    /**\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，左右边界的黑边之和在实际画布中的长度\n     */\n    static getShowAllModeHorizontalBorderWidth() {\n        return cc.view.getCanvasSize().width - this.getShowAllModeRealWidth();\n    }\n\n    /**\n     * 计算当前游戏设计分辨率在ShowAll模式适配后，传入来的原始坐标在ShowAll模式下的「贴近屏幕底部」实际坐标值\n     */\n    static getShowAllModeNodePositionCloseToBottom(nodePosInDesign) {\n        let srcScaleForShowAll = MultiResolutionCompat.getShowAllModeScale();\n        let bottomBorderHeightInCanvas = MultiResolutionCompat.getShowAllModeVerticalBorderHeight() / 2;\n        let srcNodePosYInCanvas = nodePosInDesign.y * srcScaleForShowAll;\n        let finalNodePosYInCanvas = srcNodePosYInCanvas - bottomBorderHeightInCanvas;\n        let nodePosYInDesign = finalNodePosYInCanvas / srcScaleForShowAll;\n        return cc.v2(nodePosInDesign.x, nodePosYInDesign);\n    }\n\n    /**\n     * 将节点在设计分辨率中的坐标转换为节点在实际画布中的坐标\n     */\n    static convertNodePosInDesignToNodePosInCanvas(nodePosInDesign) {\n        return nodePosInDesign.sub(cc.v2(this.getShowAllModeScale(), this.getShowAllModeScale()));\n    }\n\n    /**\n     * 将节点在实际画布中的坐标转换为节点在设计分辨率中的坐标\n     */\n    static convertNodePosInCanvasToNodePosInDesign(nodePosInCanvas) {\n        return nodePosInCanvas.div(cc.v2(this.getShowAllModeScale(), this.getShowAllModeScale()));\n    }\n\n    /**\n     * 将设计分辨率下的宽度转换为实际画布中的宽度\n     *\n     * @param widthInDesign 设计分辨率下的宽度\n     */\n    static convertWidthInDesignToWidthInCanvas(widthInDesign) {\n        return widthInDesign * this.getShowAllModeScale();\n    }\n\n    /**\n     * 将实际画布中的宽度转换为设计分辨率下的宽度\n     *\n     * @param widthInCanvas 画布中的宽度\n     */\n    static convertWidthInCanvasToWidthInDesign(widthInCanvas) {\n        return widthInCanvas / this.getShowAllModeScale();\n    }\n\n    /**\n     * 将设计分辨率下的高度转换为实际画布中的高度\n     *\n     * @param heightInDesign 设计分辨率下的高度\n     */\n    static convertHeightInDesignToHeightInCanvas(heightInDesign) {\n        return heightInDesign * this.getShowAllModeScale();\n    }\n\n    /**\n     * 将实际画布中的高度转换为设计分辨率下的宽度\n     * @param heightIncanvas 画布中的高度\n     */\n    static convertHeightInCanvasToHeightInDesign(heightIncanvas) {\n        return heightIncanvas / this.getShowAllModeScale();\n    }\n}\n"]}