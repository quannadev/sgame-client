
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/minipoker/UIMiniPoker.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ae9f1M24aFHxKf97fCiKsbM', 'UIMiniPoker');
// scripts/minipoker/UIMiniPoker.js

"use strict";

var WinGame = require("MiniPokerWinGame");

var Helper = require("Helper");

var reel = require("MiniPokerReel");

var UtilsUI = require("UtilsUI");

var PokerCard = require("PokerCard");

var Language = require("sinbadLanguage");

var ListRoom = cc.Enum({
  "1l": 100,
  "1k": 1000,
  "10k": 10000
});
cc.Class({
  "extends": cc.VozBaseComponent,
  properties: {
    reels: {
      "default": [],
      type: reel
    },
    iconPrefab: cc.Prefab,
    selectRoom: cc.Node,
    noticeNode: cc.Node,
    btnQuay: cc.Node,
    btnQuayNhanh: cc.Node,
    btnStopQuayNhanh: cc.Node,
    btnAutoQuay: cc.Node,
    btnStopAutoQuay: cc.Node,
    WinGame: WinGame,
    isAuto: false,
    isFast: false,
    isSpin: false,
    red: true,
    lastResult: [],
    betSelect: 0,
    roomNumber: 0,
    posLineWin: 0,
    totalLineWin: 0,
    TotalItemRun: 15,
    _TotalColumn: 5,
    ListCard: [],
    _isQuay: true,
    lb_hu: cc.Label,
    betLevel: "1l"
  },
  onLoad: function onLoad() {
    this._TotalColumn = 5;
    this.TotalItemRun = 15;
    this.isFast = false;
    this._isQuay = false;
    this.isAuto = false;
    cc.loader.loadRes("images/minigame/minipoker/card2d", cc.SpriteAtlas, function (err, atlas) {
      if (err) {
        console.log(err);
        return;
      }

      this.ListCard = atlas;
      this.initMiniPoker();
      this.WinGame.init(this);
    }.bind(this));
    var self = this;
    Promise.all(this.selectRoom.children.map(function (room, index) {
      Helper.setMaterialGray(room.getComponent(cc.Sprite), true);
    })).then(function (result) {
      Helper.setMaterialGray(self.selectRoom.children[0].getComponent(cc.Sprite), false);
    });
    this.betLevel = "1l";
    this.roomNumber = ListRoom["1l"];
    this.schedule(this.updateJackpot, 3);
    this.updateJackpot();
  },
  onEnable: function onEnable() {
    if (this.node.zIndex <= cc.lastZIndex) {
      cc.lastZIndex += 1;
      this.node.zIndex = cc.lastZIndex;
    }

    cc.currentUI = "UIMiniPoker";
    mm.Loading.hide();
  },
  onDisable: function onDisable() {
    this.node.stopAllActions();
  },
  updateJackpot: function updateJackpot() {
    var key = "minipoker" + this.betLevel;
    var variableJackpot = SmartFoxSDK.MiniPokerController.ZoneInstance.mySelf.getVariable(key);

    if (variableJackpot) {
      var jackpot = variableJackpot.value;
      var current_lb_jackpot = this.lb_hu.string;
      current_lb_jackpot = current_lb_jackpot.split(".").join("");
      var currentHu = parseFloat(current_lb_jackpot);
      Utils.numberTo(this.lb_hu, currentHu, jackpot, 1000, true);
    }
  },
  initMiniPoker: function initMiniPoker() {
    var self = this;
    self.lastResult = [];
    Promise.all(this.reels.map(function (reel, index) {
      var lastArray = self.initRandomItems(self.TotalItemRun, 1, 52);
      self.lastResult.push(lastArray[lastArray.length - 1]);
      reel.init(self, lastArray);
    }));
  },
  setMoneyWin: function setMoneyWin(totalMoney) {},
  updateDataPhong: function updateDataPhong(roomId) {},
  // update (dt) {},
  eventSieuToc: function eventSieuToc() {
    this.isFast = true;
    this.isAuto = true;
    this.btnStopAutoQuay.active = false;
    this.btnStopQuayNhanh.active = true;
    this.autoQuay();
  },
  eventAutoQuay: function eventAutoQuay() {
    this.isAuto = true;
    this.isFast = false;
    this.btnStopAutoQuay.active = true;
    this.btnQuayNhanh.active = true;
    this.autoQuay();
  },
  eventStopAuto: function eventStopAuto() {
    this.isAuto = false;
    this.btnAutoQuay.active = true;
    this.btnStopAutoQuay.active = false;
  },
  eventStopSieuToc: function eventStopSieuToc() {
    this.isFast = false;
    this.isAuto = false;
    this.btnQuayNhanh.active = true;
    this.btnStopQuayNhanh.active = false;
  },
  eventPhong: function eventPhong(event, data) {
    mm.audio.playButton();

    if (this._isQuay) {
      this.addNotice(Language.getString("noti_is_playing"));
      return;
    }

    Promise.all(this.selectRoom.children.map(function (room, index) {
      Helper.setMaterialGray(room.getComponent(cc.Sprite), true);
    })).then(function (result) {
      Helper.setMaterialGray(event.target.getComponent(cc.Sprite), false);
    });
    this.roomNumber = parseInt(data);

    if (this.roomNumber == 100) {
      this.betLevel = "1l";
    } else if (this.roomNumber == 1000) {
      this.betLevel = "1k";
    } else if (this.roomNumber == 10000) {
      this.betLevel = "10k";
    }

    this.updateJackpot();
  },
  checkEnoughMoney: function checkEnoughMoney() {
    if (GameVariables.Poker.getChip(SmartFoxSDK.MiniPokerController.ZoneInstance.mySelf) < this.roomNumber) {
      return false;
    }

    return true;
  },
  eventQuay: function eventQuay() {
    if (!this.checkEnoughMoney()) {
      mm.Toast.showToast(1, Language.getString("noti_not_money"));
      return;
    }

    if (this._isQuay) {
      this.addNotice(Language.getString("noti_is_playing"));
      return;
    }

    this._isQuay = true;
    this.btnQuay.getComponent(sp.Skeleton).setAnimation(0, "Spine", false);
    var betRequest = new MiniPokerRequest.BetRequest();
    betRequest.setBet(this.roomNumber);
    this.updateChipAll(this.roomNumber);
    SmartFoxSDK.MiniPokerController.ZoneInstance.send(betRequest.toSRequest());
  },
  pauseSystemEventNode: function pauseSystemEventNode(nodeEvent, isPause) {
    Helper.setMaterialGray(nodeEvent.getComponent(cc.Sprite), isPause);

    if (isPause) {
      nodeEvent.pauseSystemEvents(true);
    } else nodeEvent.resumeSystemEvents(true);
  },
  eventBack: function eventBack() {
    mm.audio.playButton();

    if (this._isQuay) {
      this.addNotice(Language.getString("noti_is_playing"));
      return;
    }

    var room = SmartFoxSDK.MiniPokerController.ZoneInstance.getRoomByName("minipoker");

    if (room) {
      SmartFoxSDK.MiniPokerController.ZoneInstance.send(new SmartFoxSDK.SmartFox.Requests.System.LeaveRoomRequest(room));
    } else {
      this.back();
    }
  },
  eventSetting: function eventSetting() {
    mm.audio.playButton();
  },
  eventVinhDanh: function eventVinhDanh() {
    mm.audio.playButton();
    mm.Loading.show();
    var request = new CasinoRequest.LeaderBoardRequest();
    SmartFoxSDK.MiniPokerController.ZoneInstance.send(request.toSRequest());
  },
  eventLichSuGiaoDich: function eventLichSuGiaoDich() {
    mm.audio.playButton();
    mm.Loading.show();
    var request = new CasinoRequest.HistoryRequest();
    SmartFoxSDK.MiniPokerController.ZoneInstance.send(request.toSRequest());
  },
  eventOpenHelper: function eventOpenHelper() {
    mm.audio.playButton();
    this.show("UIMiniPokerHelper", {
      pop: true,
      src: 'minipoker'
    });
  },
  MiniPokerRun: function MiniPokerRun(data) {
    var self = this;

    var newResult = this._convertPosCard(data.result);

    newResult = this.getDataResult(newResult);
    Promise.all(newResult.map(function (cel, cel_index) {
      Promise.all(cel.map(function (icon, index) {
        self.reels[cel_index].icons[index].setIcon(icon, true);
      }));
    })).then(function (result) {
      self.runReels();
    });
    this.winMoney = data.winMoney;
    this.isNoHu = data.noHu;
    this.handWinType = data.handWinType;
  },
  _convertPosCard: function _convertPosCard(result) {
    var newResult = [];

    for (var i = 0; i < result.length; i++) {
      var card = new PokerCard.Card(result[i]);
      newResult.push(card.nameFile);
    }

    return newResult;
  },
  initRandomItems: function initRandomItems(numberItem, min, maxRandom) {
    var listItem = [];

    for (var i = 0; i < numberItem; i++) {
      listItem[i] = this.random(min, maxRandom);
    }

    return listItem;
  },
  getDataResult: function getDataResult(result) {
    var self = this;
    var newArray = [];

    for (var i = 0; i < this._TotalColumn; i++) {
      newArray[i] = [];
    }

    for (var _i = 0; _i < result.length; _i++) {
      newArray[_i % self._TotalColumn].push(result[_i]);
    }

    for (var _i2 = 0; _i2 < this._TotalColumn; _i2++) {
      var randomArr = this.initRandomItems(this.TotalItemRun - 2, 1, 52);
      newArray[_i2] = newArray[_i2].concat(randomArr);
    }

    for (var _i3 = 0; _i3 < this.lastResult.length; _i3++) {
      newArray[_i3 % self._TotalColumn].push(this.lastResult[_i3]);
    }

    this.lastResult = result;
    return newArray;
  },
  reformatResult: function reformatResult(result, size) {
    var res = [];

    for (var i = 0; i < result.length; i = i + size) {
      res.push(result.slice(i, i + size));
    }

    return res;
  },
  runActionWon: function runActionWon() {
    this._isQuay = false;
    this.WinGame.runWinGame();
  },
  resume: function resume() {
    if (this.winMoney > 0) {
      setTimeout(function () {
        this.WinGame.runWinGame();
      }.bind(this), 300);
    } else {
      this.WinGame.runWinGame();
    }
  },
  autoQuay: function autoQuay() {
    if (!this.checkEnoughMoney()) {
      mm.Toast.showToast(1, Language.getString("noti_not_money"));
      return;
    }

    if (this.isAuto) {
      this.eventQuay();
    }
  },
  runReels: function runReels() {
    Promise.all(this.reels.map(function (reel, index) {
      reel.spin(index);
    }));
  },
  copy: function copy() {
    Promise.all(this.reels.map(function (reel) {
      reel.icons[reel.icons.length - 1].setIcon(reel.icons[0].data);
    }));
  },
  random: function random(min, max) {
    return min + ~~(Math.random() * max);
  },
  resetSpin: function resetSpin() {},
  checkHasMoney: function checkHasMoney() {
    return true;
  },
  addNotice: function addNotice(message) {
    var self = this;
    this.noticeNode.active = true;
    this.noticeNode.getChildByName("lb_noti").getComponent(cc.Label).string = message;
    setTimeout(function () {
      self.noticeNode.active = false;
    }, 1200);
  },
  updateChipAll: function updateChipAll(subChip) {
    SmartFoxSDK.MiniPokerController.onEventUpdateChip(subChip);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcbWluaXBva2VyXFxVSU1pbmlQb2tlci5qcyJdLCJuYW1lcyI6WyJXaW5HYW1lIiwicmVxdWlyZSIsIkhlbHBlciIsInJlZWwiLCJVdGlsc1VJIiwiUG9rZXJDYXJkIiwiTGFuZ3VhZ2UiLCJMaXN0Um9vbSIsImNjIiwiRW51bSIsIkNsYXNzIiwiVm96QmFzZUNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJyZWVscyIsInR5cGUiLCJpY29uUHJlZmFiIiwiUHJlZmFiIiwic2VsZWN0Um9vbSIsIk5vZGUiLCJub3RpY2VOb2RlIiwiYnRuUXVheSIsImJ0blF1YXlOaGFuaCIsImJ0blN0b3BRdWF5TmhhbmgiLCJidG5BdXRvUXVheSIsImJ0blN0b3BBdXRvUXVheSIsImlzQXV0byIsImlzRmFzdCIsImlzU3BpbiIsInJlZCIsImxhc3RSZXN1bHQiLCJiZXRTZWxlY3QiLCJyb29tTnVtYmVyIiwicG9zTGluZVdpbiIsInRvdGFsTGluZVdpbiIsIlRvdGFsSXRlbVJ1biIsIl9Ub3RhbENvbHVtbiIsIkxpc3RDYXJkIiwiX2lzUXVheSIsImxiX2h1IiwiTGFiZWwiLCJiZXRMZXZlbCIsIm9uTG9hZCIsImxvYWRlciIsImxvYWRSZXMiLCJTcHJpdGVBdGxhcyIsImVyciIsImF0bGFzIiwiY29uc29sZSIsImxvZyIsImluaXRNaW5pUG9rZXIiLCJpbml0IiwiYmluZCIsInNlbGYiLCJQcm9taXNlIiwiYWxsIiwiY2hpbGRyZW4iLCJtYXAiLCJyb29tIiwiaW5kZXgiLCJzZXRNYXRlcmlhbEdyYXkiLCJnZXRDb21wb25lbnQiLCJTcHJpdGUiLCJ0aGVuIiwicmVzdWx0Iiwic2NoZWR1bGUiLCJ1cGRhdGVKYWNrcG90Iiwib25FbmFibGUiLCJub2RlIiwiekluZGV4IiwibGFzdFpJbmRleCIsImN1cnJlbnRVSSIsIm1tIiwiTG9hZGluZyIsImhpZGUiLCJvbkRpc2FibGUiLCJzdG9wQWxsQWN0aW9ucyIsImtleSIsInZhcmlhYmxlSmFja3BvdCIsIlNtYXJ0Rm94U0RLIiwiTWluaVBva2VyQ29udHJvbGxlciIsIlpvbmVJbnN0YW5jZSIsIm15U2VsZiIsImdldFZhcmlhYmxlIiwiamFja3BvdCIsInZhbHVlIiwiY3VycmVudF9sYl9qYWNrcG90Iiwic3RyaW5nIiwic3BsaXQiLCJqb2luIiwiY3VycmVudEh1IiwicGFyc2VGbG9hdCIsIlV0aWxzIiwibnVtYmVyVG8iLCJsYXN0QXJyYXkiLCJpbml0UmFuZG9tSXRlbXMiLCJwdXNoIiwibGVuZ3RoIiwic2V0TW9uZXlXaW4iLCJ0b3RhbE1vbmV5IiwidXBkYXRlRGF0YVBob25nIiwicm9vbUlkIiwiZXZlbnRTaWV1VG9jIiwiYWN0aXZlIiwiYXV0b1F1YXkiLCJldmVudEF1dG9RdWF5IiwiZXZlbnRTdG9wQXV0byIsImV2ZW50U3RvcFNpZXVUb2MiLCJldmVudFBob25nIiwiZXZlbnQiLCJkYXRhIiwiYXVkaW8iLCJwbGF5QnV0dG9uIiwiYWRkTm90aWNlIiwiZ2V0U3RyaW5nIiwidGFyZ2V0IiwicGFyc2VJbnQiLCJjaGVja0Vub3VnaE1vbmV5IiwiR2FtZVZhcmlhYmxlcyIsIlBva2VyIiwiZ2V0Q2hpcCIsImV2ZW50UXVheSIsIlRvYXN0Iiwic2hvd1RvYXN0Iiwic3AiLCJTa2VsZXRvbiIsInNldEFuaW1hdGlvbiIsImJldFJlcXVlc3QiLCJNaW5pUG9rZXJSZXF1ZXN0IiwiQmV0UmVxdWVzdCIsInNldEJldCIsInVwZGF0ZUNoaXBBbGwiLCJzZW5kIiwidG9TUmVxdWVzdCIsInBhdXNlU3lzdGVtRXZlbnROb2RlIiwibm9kZUV2ZW50IiwiaXNQYXVzZSIsInBhdXNlU3lzdGVtRXZlbnRzIiwicmVzdW1lU3lzdGVtRXZlbnRzIiwiZXZlbnRCYWNrIiwiZ2V0Um9vbUJ5TmFtZSIsIlNtYXJ0Rm94IiwiUmVxdWVzdHMiLCJTeXN0ZW0iLCJMZWF2ZVJvb21SZXF1ZXN0IiwiYmFjayIsImV2ZW50U2V0dGluZyIsImV2ZW50VmluaERhbmgiLCJzaG93IiwicmVxdWVzdCIsIkNhc2lub1JlcXVlc3QiLCJMZWFkZXJCb2FyZFJlcXVlc3QiLCJldmVudExpY2hTdUdpYW9EaWNoIiwiSGlzdG9yeVJlcXVlc3QiLCJldmVudE9wZW5IZWxwZXIiLCJwb3AiLCJzcmMiLCJNaW5pUG9rZXJSdW4iLCJuZXdSZXN1bHQiLCJfY29udmVydFBvc0NhcmQiLCJnZXREYXRhUmVzdWx0IiwiY2VsIiwiY2VsX2luZGV4IiwiaWNvbiIsImljb25zIiwic2V0SWNvbiIsInJ1blJlZWxzIiwid2luTW9uZXkiLCJpc05vSHUiLCJub0h1IiwiaGFuZFdpblR5cGUiLCJpIiwiY2FyZCIsIkNhcmQiLCJuYW1lRmlsZSIsIm51bWJlckl0ZW0iLCJtaW4iLCJtYXhSYW5kb20iLCJsaXN0SXRlbSIsInJhbmRvbSIsIm5ld0FycmF5IiwicmFuZG9tQXJyIiwiY29uY2F0IiwicmVmb3JtYXRSZXN1bHQiLCJzaXplIiwicmVzIiwic2xpY2UiLCJydW5BY3Rpb25Xb24iLCJydW5XaW5HYW1lIiwicmVzdW1lIiwic2V0VGltZW91dCIsInNwaW4iLCJjb3B5IiwibWF4IiwiTWF0aCIsInJlc2V0U3BpbiIsImNoZWNrSGFzTW9uZXkiLCJtZXNzYWdlIiwiZ2V0Q2hpbGRCeU5hbWUiLCJzdWJDaGlwIiwib25FdmVudFVwZGF0ZUNoaXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsT0FBTyxHQUFPQyxPQUFPLENBQUMsa0JBQUQsQ0FBekI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFRRCxPQUFPLENBQUMsUUFBRCxDQUF6Qjs7QUFDQSxJQUFJRSxJQUFJLEdBQVVGLE9BQU8sQ0FBQyxlQUFELENBQXpCOztBQUNBLElBQUlHLE9BQU8sR0FBT0gsT0FBTyxDQUFDLFNBQUQsQ0FBekI7O0FBQ0EsSUFBSUksU0FBUyxHQUFLSixPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxJQUFJSyxRQUFRLEdBQU1MLE9BQU8sQ0FBQyxnQkFBRCxDQUF6Qjs7QUFDQSxJQUFJTSxRQUFRLEdBQUdDLEVBQUUsQ0FBQ0MsSUFBSCxDQUFR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SUFGTyxDQUFWO0FBR0gsR0FqVEk7QUFrVEw0QixFQUFBQSxhQWxUSyx5QkFrVFNvRSxPQWxUVCxFQWtUa0I7QUFDbkJ4SCxJQUFBQSxXQUFXLENBQUNDLG1CQUFaLENBQWdDd0gsaUJBQWhDLENBQWtERCxPQUFsRDtBQUNIO0FBcFRJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbImxldCBXaW5HYW1lICAgICA9IHJlcXVpcmUoXCJNaW5pUG9rZXJXaW5HYW1lXCIpO1xyXG5sZXQgSGVscGVyICAgICAgPSByZXF1aXJlKFwiSGVscGVyXCIpO1xyXG5sZXQgcmVlbCAgICAgICAgPSByZXF1aXJlKFwiTWluaVBva2VyUmVlbFwiKTtcclxubGV0IFV0aWxzVUkgICAgID0gcmVxdWlyZShcIlV0aWxzVUlcIik7XHJcbmxldCBQb2tlckNhcmQgICA9IHJlcXVpcmUoXCJQb2tlckNhcmRcIik7XHJcbmxldCBMYW5ndWFnZSAgICA9IHJlcXVpcmUoXCJzaW5iYWRMYW5ndWFnZVwiKTtcclxubGV0IExpc3RSb29tID0gY2MuRW51bSh7XHJcbiAgICBcIjFsXCIgICA6IDEwMCxcclxuICAgIFwiMWtcIiAgICA6IDEwMDAsXHJcbiAgICBcIjEwa1wiICAgOiAxMDAwMFxyXG59KTtcclxuY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuVm96QmFzZUNvbXBvbmVudCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgcmVlbHM6IHtcclxuICAgICAgICAgICAgZGVmYXVsdDogW10sXHJcbiAgICAgICAgICAgIHR5cGU6IHJlZWwsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpY29uUHJlZmFiICAgICAgICAgIDogY2MuUHJlZmFiLFxyXG4gICAgICAgIHNlbGVjdFJvb20gICAgICAgICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIG5vdGljZU5vZGUgICAgICAgICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIGJ0blF1YXkgICAgICAgICAgICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIGJ0blF1YXlOaGFuaCAgICAgICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIGJ0blN0b3BRdWF5TmhhbmggICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIGJ0bkF1dG9RdWF5ICAgICAgICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIGJ0blN0b3BBdXRvUXVheSAgICAgOiBjYy5Ob2RlLFxyXG4gICAgICAgIFdpbkdhbWUgICAgICAgICAgICAgOiBXaW5HYW1lLFxyXG4gICAgICAgIGlzQXV0byAgICAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICBpc0Zhc3QgICAgICAgICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgaXNTcGluICAgICAgICAgICAgICA6IGZhbHNlLFxyXG4gICAgICAgIHJlZCAgICAgICAgICAgICAgICAgOiB0cnVlLFxyXG4gICAgICAgIGxhc3RSZXN1bHQgICAgICAgICAgOiBbXSxcclxuICAgICAgICBiZXRTZWxlY3QgICAgICAgICAgIDogMCxcclxuICAgICAgICByb29tTnVtYmVyICAgICAgICAgIDogMCxcclxuICAgICAgICBwb3NMaW5lV2luICAgICAgICAgIDogMCxcclxuICAgICAgICB0b3RhbExpbmVXaW4gICAgICAgIDogMCxcclxuICAgICAgICBUb3RhbEl0ZW1SdW4gICAgICAgIDogMTUsXHJcbiAgICAgICAgX1RvdGFsQ29sdW1uICAgICAgICA6IDUsXHJcbiAgICAgICAgTGlzdENhcmQgICAgICAgICAgIDogW10sXHJcbiAgICAgICAgX2lzUXVheSAgICAgICAgICAgICA6IHRydWUsXHJcbiAgICAgICAgbGJfaHU6IGNjLkxhYmVsLFxyXG4gICAgICAgIGJldExldmVsOiBcIjFsXCIsXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkICgpIHtcclxuICAgICAgICB0aGlzLl9Ub3RhbENvbHVtbiA9IDU7XHJcbiAgICAgICAgdGhpcy5Ub3RhbEl0ZW1SdW4gPSAxNTtcclxuICAgICAgICB0aGlzLmlzRmFzdCAgICAgICA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzUXVheSAgICAgID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0F1dG8gICAgICAgPSBmYWxzZTtcclxuICAgICAgICBjYy5sb2FkZXIubG9hZFJlcyhcImltYWdlcy9taW5pZ2FtZS9taW5pcG9rZXIvY2FyZDJkXCIsIGNjLlNwcml0ZUF0bGFzLCBmdW5jdGlvbiAoZXJyLCBhdGxhcykge1xyXG4gICAgICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLkxpc3RDYXJkICAgPSBhdGxhcztcclxuICAgICAgICAgICAgdGhpcy5pbml0TWluaVBva2VyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuV2luR2FtZS5pbml0KHRoaXMpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMuc2VsZWN0Um9vbS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24ocm9vbSwgaW5kZXgpe1xyXG4gICAgICAgICAgICBIZWxwZXIuc2V0TWF0ZXJpYWxHcmF5KHJvb20uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSksIHRydWUpO1xyXG4gICAgICAgIH0pKS50aGVuKHJlc3VsdCA9PntcclxuICAgICAgICAgICAgSGVscGVyLnNldE1hdGVyaWFsR3JheShzZWxmLnNlbGVjdFJvb20uY2hpbGRyZW5bMF0uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSksIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJldExldmVsID0gXCIxbFwiO1xyXG4gICAgICAgIHRoaXMucm9vbU51bWJlciA9IExpc3RSb29tW1wiMWxcIl07XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZSh0aGlzLnVwZGF0ZUphY2twb3QsIDMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSmFja3BvdCgpO1xyXG4gICAgfSxcclxuICAgIG9uRW5hYmxlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuekluZGV4IDw9IGNjLmxhc3RaSW5kZXgpe1xyXG4gICAgICAgICAgICBjYy5sYXN0WkluZGV4ICAgKz0gMTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLnpJbmRleCA9IGNjLmxhc3RaSW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNjLmN1cnJlbnRVSSAgPSBcIlVJTWluaVBva2VyXCI7XHJcbiAgICAgICAgbW0uTG9hZGluZy5oaWRlKCk7XHJcbiAgICB9LFxyXG4gICAgb25EaXNhYmxlKCl7XHJcbiAgICAgICAgdGhpcy5ub2RlLnN0b3BBbGxBY3Rpb25zKCk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlSmFja3BvdCgpe1xyXG4gICAgICAgIGxldCBrZXkgPSBcIm1pbmlwb2tlclwiK3RoaXMuYmV0TGV2ZWw7XHJcbiAgICAgICAgbGV0IHZhcmlhYmxlSmFja3BvdCA9IFNtYXJ0Rm94U0RLLk1pbmlQb2tlckNvbnRyb2xsZXIuWm9uZUluc3RhbmNlLm15U2VsZi5nZXRWYXJpYWJsZShrZXkpO1xyXG4gICAgICAgIGlmKHZhcmlhYmxlSmFja3BvdCl7XHJcbiAgICAgICAgICAgIGxldCBqYWNrcG90ID0gdmFyaWFibGVKYWNrcG90LnZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudF9sYl9qYWNrcG90ID0gdGhpcy5sYl9odS5zdHJpbmc7XHJcbiAgICAgICAgICAgIGN1cnJlbnRfbGJfamFja3BvdCA9IGN1cnJlbnRfbGJfamFja3BvdC5zcGxpdChcIi5cIikuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRIdSA9IHBhcnNlRmxvYXQoY3VycmVudF9sYl9qYWNrcG90KTtcclxuICAgICAgICAgICAgVXRpbHMubnVtYmVyVG8odGhpcy5sYl9odSwgY3VycmVudEh1LCBqYWNrcG90LCAxMDAwLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5pdE1pbmlQb2tlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYubGFzdFJlc3VsdCA9IFtdO1xyXG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMucmVlbHMubWFwKGZ1bmN0aW9uKHJlZWwsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGxldCBsYXN0QXJyYXkgPSBzZWxmLmluaXRSYW5kb21JdGVtcyhzZWxmLlRvdGFsSXRlbVJ1biwgMSwgNTIpO1xyXG4gICAgICAgICAgICBzZWxmLmxhc3RSZXN1bHQucHVzaChsYXN0QXJyYXlbbGFzdEFycmF5Lmxlbmd0aC0xXSk7XHJcbiAgICAgICAgICAgIHJlZWwuaW5pdChzZWxmLCBsYXN0QXJyYXkpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0sXHJcbiAgICBzZXRNb25leVdpbjogZnVuY3Rpb24odG90YWxNb25leSkge1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZURhdGFQaG9uZyhyb29tSWQpIHtcclxuXHJcbiAgICB9LFxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbiAgICBldmVudFNpZXVUb2M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaXNGYXN0ICAgICAgICAgICAgICAgICA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc0F1dG8gICAgICAgICAgICAgICAgID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmJ0blN0b3BBdXRvUXVheS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJ0blN0b3BRdWF5TmhhbmguYWN0aXZlPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYXV0b1F1YXkoKTtcclxuICAgIH0sXHJcbiAgICBldmVudEF1dG9RdWF5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmlzQXV0byAgICAgICAgICAgICAgICAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuaXNGYXN0ICAgICAgICAgICAgICAgICA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYnRuU3RvcEF1dG9RdWF5LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5idG5RdWF5TmhhbmguYWN0aXZlICAgID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmF1dG9RdWF5KCk7XHJcbiAgICB9LFxyXG4gICAgZXZlbnRTdG9wQXV0bzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5pc0F1dG8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJ0bkF1dG9RdWF5LmFjdGl2ZSAgICAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYnRuU3RvcEF1dG9RdWF5LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGV2ZW50U3RvcFNpZXVUb2M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaXNGYXN0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0F1dG8gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJ0blF1YXlOaGFuaC5hY3RpdmUgICAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYnRuU3RvcFF1YXlOaGFuaC5hY3RpdmU9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGV2ZW50UGhvbmc6IGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgbW0uYXVkaW8ucGxheUJ1dHRvbigpO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1F1YXkpe1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGljZShMYW5ndWFnZS5nZXRTdHJpbmcoXCJub3RpX2lzX3BsYXlpbmdcIikpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMuc2VsZWN0Um9vbS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24ocm9vbSwgaW5kZXgpe1xyXG4gICAgICAgICAgICBIZWxwZXIuc2V0TWF0ZXJpYWxHcmF5KHJvb20uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSksIHRydWUpO1xyXG4gICAgICAgIH0pKS50aGVuKHJlc3VsdCA9PntcclxuICAgICAgICAgICAgSGVscGVyLnNldE1hdGVyaWFsR3JheShldmVudC50YXJnZXQuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSksIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJvb21OdW1iZXIgPSBwYXJzZUludChkYXRhKTtcclxuICAgICAgICBpZih0aGlzLnJvb21OdW1iZXIgPT0gMTAwKXtcclxuICAgICAgICAgICAgdGhpcy5iZXRMZXZlbCA9IFwiMWxcIjtcclxuICAgICAgICB9ZWxzZSBpZih0aGlzLnJvb21OdW1iZXIgPT0gMTAwMCl7XHJcbiAgICAgICAgICAgIHRoaXMuYmV0TGV2ZWwgPSBcIjFrXCI7XHJcbiAgICAgICAgfWVsc2UgaWYodGhpcy5yb29tTnVtYmVyID09IDEwMDAwKXtcclxuICAgICAgICAgICAgdGhpcy5iZXRMZXZlbCA9IFwiMTBrXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlSmFja3BvdCgpO1xyXG4gICAgfSxcclxuICAgIGNoZWNrRW5vdWdoTW9uZXkoKXtcclxuICAgICAgICBpZihHYW1lVmFyaWFibGVzLlBva2VyLmdldENoaXAoU21hcnRGb3hTREsuTWluaVBva2VyQ29udHJvbGxlci5ab25lSW5zdGFuY2UubXlTZWxmKSA8IHRoaXMucm9vbU51bWJlcil7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZXZlbnRRdWF5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZighdGhpcy5jaGVja0Vub3VnaE1vbmV5KCkpe1xyXG4gICAgICAgICAgICBtbS5Ub2FzdC5zaG93VG9hc3QoMSwgTGFuZ3VhZ2UuZ2V0U3RyaW5nKFwibm90aV9ub3RfbW9uZXlcIikpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9pc1F1YXkpe1xyXG4gICAgICAgICAgICB0aGlzLmFkZE5vdGljZShMYW5ndWFnZS5nZXRTdHJpbmcoXCJub3RpX2lzX3BsYXlpbmdcIikpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2lzUXVheSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5idG5RdWF5LmdldENvbXBvbmVudChzcC5Ta2VsZXRvbikuc2V0QW5pbWF0aW9uKDAsIFwiU3BpbmVcIiwgZmFsc2UpO1xyXG4gICAgICAgIGxldCBiZXRSZXF1ZXN0ID0gbmV3IE1pbmlQb2tlclJlcXVlc3QuQmV0UmVxdWVzdCgpO1xyXG4gICAgICAgIGJldFJlcXVlc3Quc2V0QmV0KHRoaXMucm9vbU51bWJlcik7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDaGlwQWxsKHRoaXMucm9vbU51bWJlcik7XHJcbiAgICAgICAgU21hcnRGb3hTREsuTWluaVBva2VyQ29udHJvbGxlci5ab25lSW5zdGFuY2Uuc2VuZChiZXRSZXF1ZXN0LnRvU1JlcXVlc3QoKSk7XHJcbiAgICB9LFxyXG4gICAgcGF1c2VTeXN0ZW1FdmVudE5vZGU6IGZ1bmN0aW9uKG5vZGVFdmVudCwgaXNQYXVzZSkge1xyXG4gICAgICAgIEhlbHBlci5zZXRNYXRlcmlhbEdyYXkoIG5vZGVFdmVudC5nZXRDb21wb25lbnQoY2MuU3ByaXRlKSwgaXNQYXVzZSk7XHJcbiAgICAgICAgaWYgKGlzUGF1c2Upe1xyXG4gICAgICAgICAgICBub2RlRXZlbnQucGF1c2VTeXN0ZW1FdmVudHModHJ1ZSk7XHJcbiAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgbm9kZUV2ZW50LnJlc3VtZVN5c3RlbUV2ZW50cyh0cnVlKTtcclxuICAgIH0sXHJcbiAgICBldmVudEJhY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG1tLmF1ZGlvLnBsYXlCdXR0b24oKTtcclxuICAgICAgICBpZiAodGhpcy5faXNRdWF5KXtcclxuICAgICAgICAgICAgdGhpcy5hZGROb3RpY2UoTGFuZ3VhZ2UuZ2V0U3RyaW5nKFwibm90aV9pc19wbGF5aW5nXCIpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcm9vbSA9IFNtYXJ0Rm94U0RLLk1pbmlQb2tlckNvbnRyb2xsZXIuWm9uZUluc3RhbmNlLmdldFJvb21CeU5hbWUoXCJtaW5pcG9rZXJcIik7XHJcbiAgICAgICAgaWYocm9vbSl7XHJcbiAgICAgICAgICAgIFNtYXJ0Rm94U0RLLk1pbmlQb2tlckNvbnRyb2xsZXIuWm9uZUluc3RhbmNlLnNlbmQobmV3IFNtYXJ0Rm94U0RLLlNtYXJ0Rm94LlJlcXVlc3RzLlN5c3RlbS5MZWF2ZVJvb21SZXF1ZXN0KHJvb20pKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5iYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGV2ZW50U2V0dGluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbW0uYXVkaW8ucGxheUJ1dHRvbigpO1xyXG4gICAgfSxcclxuICAgIGV2ZW50VmluaERhbmg6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG1tLmF1ZGlvLnBsYXlCdXR0b24oKTtcclxuICAgICAgICBtbS5Mb2FkaW5nLnNob3coKTtcclxuICAgICAgICBsZXQgcmVxdWVzdCA9IG5ldyBDYXNpbm9SZXF1ZXN0LkxlYWRlckJvYXJkUmVxdWVzdCgpO1xyXG4gICAgICAgIFNtYXJ0Rm94U0RLLk1pbmlQb2tlckNvbnRyb2xsZXIuWm9uZUluc3RhbmNlLnNlbmQocmVxdWVzdC50b1NSZXF1ZXN0KCkpO1xyXG4gICAgfSxcclxuICAgIGV2ZW50TGljaFN1R2lhb0RpY2g6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG1tLmF1ZGlvLnBsYXlCdXR0b24oKTtcclxuICAgICAgICBtbS5Mb2FkaW5nLnNob3coKTtcclxuICAgICAgICBsZXQgcmVxdWVzdCA9IG5ldyBDYXNpbm9SZXF1ZXN0Lkhpc3RvcnlSZXF1ZXN0KCk7XHJcbiAgICAgICAgU21hcnRGb3hTREsuTWluaVBva2VyQ29udHJvbGxlci5ab25lSW5zdGFuY2Uuc2VuZChyZXF1ZXN0LnRvU1JlcXVlc3QoKSk7XHJcbiAgICB9LFxyXG4gICAgZXZlbnRPcGVuSGVscGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBtbS5hdWRpby5wbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgdGhpcy5zaG93KFwiVUlNaW5pUG9rZXJIZWxwZXJcIiwge3BvcDogdHJ1ZSwgc3JjOiAnbWluaXBva2VyJ30pO1xyXG4gICAgfSxcclxuICAgIE1pbmlQb2tlclJ1bjogZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgbGV0IHNlbGYgICAgICA9IHRoaXM7XHJcbiAgICAgICAgbGV0IG5ld1Jlc3VsdCA9IHRoaXMuX2NvbnZlcnRQb3NDYXJkKGRhdGEucmVzdWx0KTtcclxuICAgICAgICBuZXdSZXN1bHQgICAgID0gdGhpcy5nZXREYXRhUmVzdWx0KG5ld1Jlc3VsdCk7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwobmV3UmVzdWx0Lm1hcChmdW5jdGlvbihjZWwsIGNlbF9pbmRleCl7XHJcbiAgICAgICAgICAgIFByb21pc2UuYWxsKGNlbC5tYXAoZnVuY3Rpb24oaWNvbiwgaW5kZXgpe1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZWVsc1tjZWxfaW5kZXhdLmljb25zW2luZGV4XS5zZXRJY29uKGljb24sIHRydWUpO1xyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfSkpLnRoZW4ocmVzdWx0ID0+e1xyXG4gICAgICAgICAgICBzZWxmLnJ1blJlZWxzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aW5Nb25leSAgID0gZGF0YS53aW5Nb25leTtcclxuICAgICAgICB0aGlzLmlzTm9IdSAgICAgPSBkYXRhLm5vSHU7XHJcbiAgICAgICAgdGhpcy5oYW5kV2luVHlwZT0gZGF0YS5oYW5kV2luVHlwZTtcclxuICAgIH0sXHJcbiAgICBfY29udmVydFBvc0NhcmQocmVzdWx0KSB7XHJcbiAgICAgICAgbGV0IG5ld1Jlc3VsdCA9W107XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPCByZXN1bHQubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBsZXQgY2FyZCA9IG5ldyBQb2tlckNhcmQuQ2FyZChyZXN1bHRbaV0pO1xyXG4gICAgICAgICAgICBuZXdSZXN1bHQucHVzaChjYXJkLm5hbWVGaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld1Jlc3VsdDtcclxuICAgIH0sXHJcbiAgICBpbml0UmFuZG9tSXRlbXM6IGZ1bmN0aW9uKG51bWJlckl0ZW0sIG1pbiwgbWF4UmFuZG9tKSB7XHJcbiAgICAgICAgbGV0IGxpc3RJdGVtID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPCBudW1iZXJJdGVtOyBpKyspe1xyXG4gICAgICAgICAgICBsaXN0SXRlbVtpXSA9IHRoaXMucmFuZG9tKG1pbiwgbWF4UmFuZG9tKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxpc3RJdGVtO1xyXG4gICAgfSxcclxuICAgIGdldERhdGFSZXN1bHQ6IGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBsZXQgbmV3QXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8IHRoaXMuX1RvdGFsQ29sdW1uOyBpKyspe1xyXG4gICAgICAgICAgICBuZXdBcnJheVtpXSA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpPTA7IGk8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBuZXdBcnJheVtpJXNlbGYuX1RvdGFsQ29sdW1uXS5wdXNoKHJlc3VsdFtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTwgdGhpcy5fVG90YWxDb2x1bW47IGkrKyl7XHJcbiAgICAgICAgICAgIGxldCByYW5kb21BcnIgPSB0aGlzLmluaXRSYW5kb21JdGVtcyh0aGlzLlRvdGFsSXRlbVJ1bi0yLCAxLCA1Mik7XHJcbiAgICAgICAgICAgIG5ld0FycmF5W2ldICAgPSBuZXdBcnJheVtpXS5jb25jYXQocmFuZG9tQXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaT0wOyBpPCAgdGhpcy5sYXN0UmVzdWx0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5ld0FycmF5W2klc2VsZi5fVG90YWxDb2x1bW5dLnB1c2goIHRoaXMubGFzdFJlc3VsdFtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubGFzdFJlc3VsdCA9IHJlc3VsdDtcclxuICAgICAgICByZXR1cm4gbmV3QXJyYXk7XHJcbiAgICB9LFxyXG4gICAgcmVmb3JtYXRSZXN1bHQocmVzdWx0LCBzaXplKSB7XHJcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xyXG4gICAgICAgIGZvcihsZXQgaT0wO2kgPCByZXN1bHQubGVuZ3RoOyBpID0gaStzaXplKVxyXG4gICAgICAgICAgICByZXMucHVzaChyZXN1bHQuc2xpY2UoaSxpK3NpemUpKTtcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSxcclxuICAgIHJ1bkFjdGlvbldvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5faXNRdWF5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5XaW5HYW1lLnJ1bldpbkdhbWUoKTtcclxuICAgIH0sXHJcbiAgICByZXN1bWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud2luTW9uZXkgPiAwKXtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5XaW5HYW1lLnJ1bldpbkdhbWUoKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCAzMDApO1xyXG4gICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5XaW5HYW1lLnJ1bldpbkdhbWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYXV0b1F1YXkoKSB7XHJcbiAgICAgICAgaWYoIXRoaXMuY2hlY2tFbm91Z2hNb25leSgpKXtcclxuICAgICAgICAgICAgbW0uVG9hc3Quc2hvd1RvYXN0KDEsIExhbmd1YWdlLmdldFN0cmluZyhcIm5vdGlfbm90X21vbmV5XCIpKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0F1dG8pe1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50UXVheSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBydW5SZWVsczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMucmVlbHMubWFwKGZ1bmN0aW9uKHJlZWwsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJlZWwuc3BpbihpbmRleCk7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfSxcclxuICAgIGNvcHk6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgUHJvbWlzZS5hbGwodGhpcy5yZWVscy5tYXAoZnVuY3Rpb24ocmVlbCl7XHJcbiAgICAgICAgICAgIHJlZWwuaWNvbnNbcmVlbC5pY29ucy5sZW5ndGgtMV0uc2V0SWNvbihyZWVsLmljb25zWzBdLmRhdGEpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH0sXHJcbiAgICByYW5kb206IGZ1bmN0aW9uKG1pbiwgbWF4KXtcclxuICAgICAgICByZXR1cm4gIG1pbisgfn4oTWF0aC5yYW5kb20oKSptYXgpO1xyXG4gICAgfSxcclxuICAgIHJlc2V0U3BpbjogZnVuY3Rpb24gKCkge1xyXG4gICAgfSxcclxuICAgIGNoZWNrSGFzTW9uZXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGFkZE5vdGljZTogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5ub3RpY2VOb2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5ub3RpY2VOb2RlLmdldENoaWxkQnlOYW1lKFwibGJfbm90aVwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IG1lc3NhZ2U7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLm5vdGljZU5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfSwgMTIwMCk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlQ2hpcEFsbChzdWJDaGlwKSB7XHJcbiAgICAgICAgU21hcnRGb3hTREsuTWluaVBva2VyQ29udHJvbGxlci5vbkV2ZW50VXBkYXRlQ2hpcChzdWJDaGlwKTtcclxuICAgIH0sXHJcbn0pO1xyXG4iXX0=