
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/zeus/ZeusWinGame.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '085daivgA1Gcb7x7OQmBeqt', 'ZeusWinGame');
// scripts/zeus/ZeusWinGame.js

"use strict";

var self;

var Helper = require("Helper");

cc.Class({
  "extends": cc.VozBaseComponent,
  properties: {
    lbMoneyWin: cc.Label,
    BonusFreeSpine: cc.Node,
    NoHuCoin: cc.Node,
    ThangText: cc.Node,
    ThangLonCoin: cc.Node,
    FreeCount: cc.Node
  },
  onLoad: function onLoad() {
    self = this;
  },
  init: function init(obj) {
    this.SLV = obj;
  },
  runWinGame: function runWinGame() {
    var bgAll = this.node.getChildByName("bg_all");
    bgAll.active = true;

    if (this.SLV.isThangLon && !this.SLV.isNoHu) {
      this.SLV.playBigWin();
      this.runZeusThangLon();
    } else if (this.SLV.isNoHu) {
      this.SLV.playJackpot();
      this.runZeusNoHu();
    } else if (this.SLV.isFree) {
      this.runFreeSpine();
    } else if (this.SLV.isBonus) {
      this.SLV.playBonus();
      this.runBonusSpine();
    } else {
      self.SLV.setMoneyWin(self.SLV.winMoney);
      self.updateFreeSpin();

      if (this.SLV.winMoney > 0) {
        this.SLV.playSpinWin();
        this.lbMoneyWin.node.active = true;
        Helper.numberTo(this.lbMoneyWin, 0, this.SLV.winMoney, 1200, true, function () {
          self.scheduleOnce(function () {
            self.lbMoneyWin.node.active = false;
            bgAll.active = false;
            self.SLV.autoQuay();
          }, 1);
        });
        this.SLV.winMoney = 0;
      } else {
        bgAll.active = false;
        self.SLV.autoQuay();
      }
    }

    if (this.SLV.type == 0) this.SLV.playSpinMis();
  },
  updateFreeSpin: function updateFreeSpin() {
    if (this.SLV.freeSpin < 1) this.FreeCount.active = false;else {
      this.FreeCount.active = true;
      this.FreeCount.getChildByName("lb_free_spine_count").getComponent(cc.Label).string = this.SLV.freeSpin;
    }
  },
  checkRunAgainWin: function checkRunAgainWin() {
    if (this.SLV.isBonus || this.SLV.winMoney > 0 || this.SLV.isFree || this.SLV.isNoHu || this.SLV.isThangLon || this.SLV.isAuto) this.runWinGame();
  },
  runFreeSpine: function runFreeSpine() {
    this.SLV.isFree = false;
    this.BonusFreeSpine.active = true;
    this.BonusFreeSpine.getComponent(sp.Skeleton).setAnimation(0, 'FreeSpine', true);
    this.scheduleOnce(function () {
      self.node.getChildByName("bg_all").active = false;
      self.BonusFreeSpine.active = false;
      self.FreeCount.active = true;
      self.FreeCount.getChildByName("lb_free_spine_count").getComponent(cc.Label).string = self.SLV.freeSpin;
      self.checkRunAgainWin();
    }, 3);
  },
  runBonusSpine: function runBonusSpine() {
    this.SLV.isBonus = false;
    this.BonusFreeSpine.active = true;
    this.BonusFreeSpine.getComponent(sp.Skeleton).setAnimation(0, 'BonusGame', true);
    this.scheduleOnce(function () {
      self.BonusFreeSpine.active = false;
      self.show("UIZeusBonus", {
        src: 'zeus',
        pop: true,
        data: {
          "gifts": self.SLV.freeGift,
          "xSpecial": self.SLV.xSpecial,
          "total": self.SLV.winMoney
        }
      });
    }, 2);
  },
  runZeusNoHu: function runZeusNoHu() {
    this.SLV.isNoHu = false;
    this.NoHuCoin.active = true;
    var lbMoney = self.node.getChildByName("lb_number_win");
    lbMoney.setPosition(cc.v2(0, -50));
    lbMoney.active = true;
    this.ThangText.active = true;
    this.ThangText.getComponent(sp.Skeleton).setAnimation(0, "NoHu", true);
    Helper.numberTo(lbMoney.getComponent(cc.Label), 0, this.SLV.winMoney, 1200, true, function () {
      self.scheduleOnce(function () {
        var d = cc.moveTo(0.5, cc.v2(0, 190));
        lbMoney.runAction(cc.sequence(d, cc.delayTime(1), cc.callFunc(function () {
          self.node.getChildByName("bg_all").active = false;
          self.NoHuCoin.active = false;
          self.ThangText.active = false;
          lbMoney.active = false;
          self.checkRunAgainWin();
        })));
      }, 5);
    });
  },
  runZeusThangLon: function runZeusThangLon() {
    this.SLV.isThangLon = false;
    this.ThangLonCoin.active = true;
    this.ThangText.active = true;
    this.ThangText.getComponent(sp.Skeleton).setAnimation(0, "ThangLon", true);
    var lbMoney = self.node.getChildByName("lb_number_win");
    lbMoney.setPosition(cc.v2(0, -30));
    lbMoney.active = true;
    Helper.numberTo(lbMoney.getComponent(cc.Label), 0, this.SLV.winMoney, 1200, true, function () {
      self.scheduleOnce(function () {
        var d = cc.moveTo(0.5, cc.v2(0, 170));
        lbMoney.runAction(cc.sequence(d, cc.delayTime(0.5), cc.callFunc(function () {
          lbMoney.active = false;
          self.node.getChildByName("bg_all").active = false;
          self.ThangLonCoin.active = false;
          self.ThangText.active = false;
          self.checkRunAgainWin();
        })));
      }, 3);
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcemV1c1xcWmV1c1dpbkdhbWUuanMiXSwibmFtZXMiOlsic2VsZiIsIkhlbHBlciIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwiVm96QmFzZUNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJsYk1vbmV5V2luIiwiTGFiZWwiLCJCb251c0ZyZWVTcGluZSIsIk5vZGUiLCJOb0h1Q29pbiIsIlRoYW5nVGV4dCIsIlRoYW5nTG9uQ29pbiIsIkZyZWVDb3VudCIsIm9uTG9hZCIsImluaXQiLCJvYmoiLCJTTFYiLCJydW5XaW5HYW1lIiwiYmdBbGwiLCJub2RlIiwiZ2V0Q2hpbGRCeU5hbWUiLCJhY3RpdmUiLCJpc1RoYW5nTG9uIiwiaXNOb0h1IiwicGxheUJpZ1dpbiIsInJ1blpldXNUaGFuZ0xvbiIsInBsYXlKYWNrcG90IiwicnVuWmV1c05vSHUiLCJpc0ZyZWUiLCJydW5GcmVlU3BpbmUiLCJpc0JvbnVzIiwicGxheUJvbnVzIiwicnVuQm9udXNTcGluZSIsInNldE1vbmV5V2luIiwid2luTW9uZXkiLCJ1cGRhdGVGcmVlU3BpbiIsInBsYXlTcGluV2luIiwibnVtYmVyVG8iLCJzY2hlZHVsZU9uY2UiLCJhdXRvUXVheSIsInR5cGUiLCJwbGF5U3Bpbk1pcyIsImZyZWVTcGluIiwiZ2V0Q29tcG9uZW50Iiwic3RyaW5nIiwiY2hlY2tSdW5BZ2FpbldpbiIsImlzQXV0byIsInNwIiwiU2tlbGV0b24iLCJzZXRBbmltYXRpb24iLCJzaG93Iiwic3JjIiwicG9wIiwiZGF0YSIsImZyZWVHaWZ0IiwieFNwZWNpYWwiLCJsYk1vbmV5Iiwic2V0UG9zaXRpb24iLCJ2MiIsImQiLCJtb3ZlVG8iLCJydW5BY3Rpb24iLCJzZXF1ZW5jZSIsImRlbGF5VGltZSIsImNhbGxGdW5jIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLElBQUo7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUFwQjs7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Q0FBa0IsWUFBVTtBQUN4QixZQUFJcUIsQ0FBQyxHQUFHMUQsRUFBRSxDQUFDMkQsTUFBSCxDQUFVLEdBQVYsRUFBZTNELEVBQUUsQ0FBQ3lELEVBQUgsQ0FBTSxDQUFOLEVBQVMsR0FBVCxDQUFmLENBQVI7QUFDQUYsUUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCNUQsRUFBRSxDQUFDNkQsUUFBSCxDQUFZSCxDQUFaLEVBQWUxRCxFQUFFLENBQUM4RCxTQUFILENBQWEsR0FBYixDQUFmLEVBQWtDOUQsRUFBRSxDQUFDK0QsUUFBSCxDQUFZLFlBQVk7QUFDeEVSLFVBQUFBLE9BQU8sQ0FBQ25DLE1BQVIsR0FBaUIsS0FBakI7QUFDQXZCLFVBQUFBLElBQUksQ0FBQ3FCLElBQUwsQ0FBVUMsY0FBVixDQUF5QixRQUF6QixFQUFtQ0MsTUFBbkMsR0FBNkMsS0FBN0M7QUFDQXZCLFVBQUFBLElBQUksQ0FBQ2EsWUFBTCxDQUFrQlUsTUFBbEIsR0FBOEIsS0FBOUI7QUFDQXZCLFVBQUFBLElBQUksQ0FBQ1ksU0FBTCxDQUFlVyxNQUFmLEdBQThCLEtBQTlCO0FBQ0F2QixVQUFBQSxJQUFJLENBQUMrQyxnQkFBTDtBQUNILFNBTm1ELENBQWxDLENBQWxCO0FBT0gsT0FURCxFQVNHLENBVEg7QUFVSCxLQVhEO0FBWUg7QUFoSUksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHNlbGY7XHJcbmxldCBIZWxwZXIgPSByZXF1aXJlKFwiSGVscGVyXCIpO1xyXG5jYy5DbGFzcyh7XHJcbiAgICBleHRlbmRzOiBjYy5Wb3pCYXNlQ29tcG9uZW50LFxyXG5cclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBsYk1vbmV5V2luICAgICAgICAgIDogY2MuTGFiZWwsXHJcbiAgICAgICAgQm9udXNGcmVlU3BpbmUgICAgICA6IGNjLk5vZGUsXHJcbiAgICAgICAgTm9IdUNvaW4gICAgXHRcdDogY2MuTm9kZSxcclxuICAgICAgICBUaGFuZ1RleHQgICBcdFx0OiBjYy5Ob2RlLFxyXG4gICAgICAgIFRoYW5nTG9uQ29pblx0XHQ6IGNjLk5vZGUsXHJcbiAgICAgICAgRnJlZUNvdW50ICAgICAgICAgICA6IGNjLk5vZGVcclxuICAgIH0sXHJcblxyXG4gICAgb25Mb2FkICgpIHtcclxuICAgICAgICBzZWxmID0gdGhpcztcclxuICAgIH0sXHJcbiAgICBpbml0KG9iaikge1xyXG4gICAgICAgIHRoaXMuU0xWID0gb2JqO1xyXG4gICAgfSxcclxuICAgIHJ1bldpbkdhbWUoKSB7XHJcbiAgICAgICAgbGV0IGJnQWxsICAgICA9IHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcImJnX2FsbFwiKTtcclxuICAgICAgICBiZ0FsbC5hY3RpdmUgID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5TTFYuaXNUaGFuZ0xvbiAmJiAhdGhpcy5TTFYuaXNOb0h1KSB7XHJcbiAgICAgICAgICAgIHRoaXMuU0xWLnBsYXlCaWdXaW4oKTtcclxuICAgICAgICAgICAgdGhpcy5ydW5aZXVzVGhhbmdMb24oKTtcclxuICAgICAgICB9ZWxzZSBpZiAodGhpcy5TTFYuaXNOb0h1KXtcclxuICAgICAgICAgICAgdGhpcy5TTFYucGxheUphY2twb3QoKTtcclxuICAgICAgICAgICAgdGhpcy5ydW5aZXVzTm9IdSgpO1xyXG4gICAgICAgIH1lbHNlIGlmICh0aGlzLlNMVi5pc0ZyZWUpe1xyXG4gICAgICAgICAgICB0aGlzLnJ1bkZyZWVTcGluZSgpO1xyXG4gICAgICAgIH1lbHNlIGlmICh0aGlzLlNMVi5pc0JvbnVzKXtcclxuICAgICAgICAgICAgdGhpcy5TTFYucGxheUJvbnVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucnVuQm9udXNTcGluZSgpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBzZWxmLlNMVi5zZXRNb25leVdpbihzZWxmLlNMVi53aW5Nb25leSk7XHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlRnJlZVNwaW4oKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuU0xWLndpbk1vbmV5ID4gMCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLlNMVi5wbGF5U3BpbldpbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYk1vbmV5V2luLm5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIEhlbHBlci5udW1iZXJUbyh0aGlzLmxiTW9uZXlXaW4sIDAsIHRoaXMuU0xWLndpbk1vbmV5LCAxMjAwLCB0cnVlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sYk1vbmV5V2luLm5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJnQWxsLmFjdGl2ZSAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5TTFYuYXV0b1F1YXkoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAxKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5TTFYud2luTW9uZXkgICA9IDA7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgYmdBbGwuYWN0aXZlICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5TTFYuYXV0b1F1YXkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5TTFYudHlwZSA9PSAwKVxyXG4gICAgICAgICAgICB0aGlzLlNMVi5wbGF5U3Bpbk1pcygpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZUZyZWVTcGluKCkge1xyXG4gICAgICAgIGlmICh0aGlzLlNMVi5mcmVlU3BpbiA8IDEpXHJcbiAgICAgICAgICAgIHRoaXMuRnJlZUNvdW50LmFjdGl2ZSAgICAgICA9IGZhbHNlO1xyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuRnJlZUNvdW50LmFjdGl2ZSAgICAgICA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuRnJlZUNvdW50LmdldENoaWxkQnlOYW1lKFwibGJfZnJlZV9zcGluZV9jb3VudFwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IHRoaXMuU0xWLmZyZWVTcGluO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjaGVja1J1bkFnYWluV2luKCkge1xyXG4gICAgICAgIGlmICh0aGlzLlNMVi5pc0JvbnVzIHx8IHRoaXMuU0xWLndpbk1vbmV5ID4gMCB8fCB0aGlzLlNMVi5pc0ZyZWUgfHwgdGhpcy5TTFYuaXNOb0h1IHx8IHRoaXMuU0xWLmlzVGhhbmdMb24gfHwgdGhpcy5TTFYuaXNBdXRvKVxyXG4gICAgICAgICAgICB0aGlzLnJ1bldpbkdhbWUoKTtcclxuICAgIH0sXHJcbiAgICBydW5GcmVlU3BpbmUoKSB7XHJcbiAgICAgICAgdGhpcy5TTFYuaXNGcmVlICAgICAgICAgICAgID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5Cb251c0ZyZWVTcGluZS5hY3RpdmUgID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLkJvbnVzRnJlZVNwaW5lLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbikuc2V0QW5pbWF0aW9uKDAsICdGcmVlU3BpbmUnLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBzZWxmLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiZ19hbGxcIikuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuQm9udXNGcmVlU3BpbmUuYWN0aXZlICA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLkZyZWVDb3VudC5hY3RpdmUgICAgICAgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLkZyZWVDb3VudC5nZXRDaGlsZEJ5TmFtZShcImxiX2ZyZWVfc3BpbmVfY291bnRcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBzZWxmLlNMVi5mcmVlU3BpbjtcclxuICAgICAgICAgICAgc2VsZi5jaGVja1J1bkFnYWluV2luKCk7XHJcbiAgICAgICAgfSwgMyk7XHJcbiAgICB9LFxyXG4gICAgcnVuQm9udXNTcGluZSgpIHtcclxuICAgICAgICB0aGlzLlNMVi5pc0JvbnVzICAgICAgICAgICAgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLkJvbnVzRnJlZVNwaW5lLmFjdGl2ZSAgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuQm9udXNGcmVlU3BpbmUuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKS5zZXRBbmltYXRpb24oMCwgJ0JvbnVzR2FtZScsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHNlbGYuQm9udXNGcmVlU3BpbmUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNlbGYuc2hvdyhcIlVJWmV1c0JvbnVzXCIsIHtzcmM6ICd6ZXVzJywgcG9wOiB0cnVlLCBkYXRhOiB7XCJnaWZ0c1wiOiBzZWxmLlNMVi5mcmVlR2lmdCwgXCJ4U3BlY2lhbFwiOiBzZWxmLlNMVi54U3BlY2lhbCwgXCJ0b3RhbFwiOiBzZWxmLlNMVi53aW5Nb25leX19KTtcclxuICAgICAgICB9LCAyKTtcclxuICAgIH0sXHJcbiAgICBydW5aZXVzTm9IdSgpe1xyXG4gICAgICAgIHRoaXMuU0xWLmlzTm9IdSAgICAgICAgICAgICAgID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5Ob0h1Q29pbi5hY3RpdmUgID0gdHJ1ZTtcclxuICAgICAgICBsZXQgbGJNb25leSA9IHNlbGYubm9kZS5nZXRDaGlsZEJ5TmFtZShcImxiX251bWJlcl93aW5cIik7XHJcbiAgICAgICAgbGJNb25leS5zZXRQb3NpdGlvbihjYy52MigwLCAtNTApKTtcclxuICAgICAgICBsYk1vbmV5LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5UaGFuZ1RleHQuYWN0aXZlICAgID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLlRoYW5nVGV4dC5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pLnNldEFuaW1hdGlvbigwLCBcIk5vSHVcIiwgdHJ1ZSk7XHJcbiAgICAgICAgSGVscGVyLm51bWJlclRvKGxiTW9uZXkuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKSwgMCwgdGhpcy5TTFYud2luTW9uZXksIDEyMDAsIHRydWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIGxldCBkID0gY2MubW92ZVRvKDAuNSwgY2MudjIoMCwgMTkwKSk7XHJcbiAgICAgICAgICAgICAgICBsYk1vbmV5LnJ1bkFjdGlvbihjYy5zZXF1ZW5jZShkLCBjYy5kZWxheVRpbWUoMSksIGNjLmNhbGxGdW5jKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiZ19hbGxcIikuYWN0aXZlICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuTm9IdUNvaW4uYWN0aXZlICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuVGhhbmdUZXh0LmFjdGl2ZSAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBsYk1vbmV5LmFjdGl2ZSAgICAgICAgICAgICAgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tSdW5BZ2FpbldpbigpO1xyXG4gICAgICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICAgICAgfSwgNSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgcnVuWmV1c1RoYW5nTG9uKCl7XHJcbiAgICAgICAgdGhpcy5TTFYuaXNUaGFuZ0xvbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuVGhhbmdMb25Db2luLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5UaGFuZ1RleHQuYWN0aXZlICAgID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLlRoYW5nVGV4dC5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pLnNldEFuaW1hdGlvbigwLCBcIlRoYW5nTG9uXCIsIHRydWUpO1xyXG4gICAgICAgIGxldCBsYk1vbmV5ID0gc2VsZi5ub2RlLmdldENoaWxkQnlOYW1lKFwibGJfbnVtYmVyX3dpblwiKTtcclxuICAgICAgICBsYk1vbmV5LnNldFBvc2l0aW9uKGNjLnYyKDAsIC0zMCkpO1xyXG4gICAgICAgIGxiTW9uZXkuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBIZWxwZXIubnVtYmVyVG8obGJNb25leS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLCAwLCB0aGlzLlNMVi53aW5Nb25leSwgMTIwMCwgdHJ1ZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzZWxmLnNjaGVkdWxlT25jZShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgbGV0IGQgPSBjYy5tb3ZlVG8oMC41LCBjYy52MigwLCAxNzApKTtcclxuICAgICAgICAgICAgICAgIGxiTW9uZXkucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGQsIGNjLmRlbGF5VGltZSgwLjUpLCBjYy5jYWxsRnVuYyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGJNb25leS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJiZ19hbGxcIikuYWN0aXZlICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuVGhhbmdMb25Db2luLmFjdGl2ZSAgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuVGhhbmdUZXh0LmFjdGl2ZSAgICAgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2hlY2tSdW5BZ2FpbldpbigpO1xyXG4gICAgICAgICAgICAgICAgfSkpKTtcclxuICAgICAgICAgICAgfSwgMyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG59KTtcclxuIl19