
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/poker/UIPoker.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e8debnA7Y5Kg47AGSDTbMUL', 'UIPoker');
// scripts/poker/UIPoker.js

"use strict";

cc.Class({
  "extends": cc.BaseGame,
  properties: {
    ChatEmojiLayer: cc.Node,
    Action: cc.Node,
    CommunityCard: cc.Node,
    lb_total_bet: cc.Label,
    PokerTextWinner: cc.Node,
    PotPrefab: cc.Prefab,
    buy_in: 0,
    bet: 500,
    POS_6: cc.Node,
    POS_9: cc.Node
  },
  onLoad: function onLoad() {
    // init prefab pot
    this.PoolPot = [];

    for (var i = 0; i < 9; i++) {
      var pot = cc.instantiate(this.PotPrefab);
      this.node.addChild(pot);
      pot.active = false;
      this.PoolPot.push(pot);
    }
  },
  onEnable: function onEnable() {
    this.buy_in = this._data.buy_in;
    this._number_desk = this._data.number_desk;
    this._room = this._data.room;
    this.poses = [];

    if (this._number_desk == 6) {
      this.POS_6.active = true;
      this.POS_9.active = false;
      this._CURRENT_POS = this.POS_6;
    } else {
      this.POS_6.active = false;
      this.POS_9.active = true;
      this._CURRENT_POS = this.POS_9;
    }

    for (var i = 0; i < this._CURRENT_POS._children.length; i++) {
      var pos = this._CURRENT_POS._children[i];
      this.poses.push(this._CURRENT_POS._children[i]);
      pos.on("touchend", function () {
        this.requestSitOn();
      }, this);
      pos.active = false;
    }

    this.countOut = 0;
  },
  onDisable: function onDisable() {
    this.nodePlayers.removeAllChildren(true);
    this.getCommunityCard().reset();
    this.hideDeskEmpty();
    this.lb_total_bet.node.parent.active = false;
    this.hidePokerTextWinner();
    this.WaitingTimer.active = false;
  },
  runActionChipToPot: function runActionChipToPot(betChip, cb) {
    if (betChip <= 0) {
      if (cb) cb();
      return;
    }

    for (var i = 0; i < this.controller.m_tableInfo.m_listUser.length; i++) {
      var player = this._getJSPlayerByName(this.controller.m_tableInfo.m_listUser[i]);

      var convertPosBet = this.getPositionInOtherNode(player.BetChip, this.node);
      var pot = this.requestPoolPot();
      pot.position = convertPosBet;
      pot.active = true;
      pot.getChildByName("money").getComponent(cc.Label).string = Utils.formatCurrency(betChip);
      pot.runAction(cc.sequence(cc.moveTo(0.3, this.lb_total_bet.node.parent.position), cc.callFunc(function () {
        this.active = false;
        if (cb) cb();
      }, pot)));
    }
  },
  hidePokerTextWinner: function hidePokerTextWinner() {
    this.PokerTextWinner.active = false;
    var animation = this.PokerTextWinner.getComponent(sp.Skeleton);
    animation.setAnimation(0, "NONE", false);
  },
  showPokerTextWinner: function showPokerTextWinner(nameWin) {
    var winningHands = {
      HIGHCARD: "Bai-Cao",
      PAIR: "Mot-Doi",
      TWOPAIR: "Hai-Doi",
      THREEOFAKIND: "Xam",
      STRAIGHT: "Sanh",
      FLUSH: "Thung",
      FULLHOUSE: "Cu-Lu",
      FOUROFAKIND: "Tu-Quy",
      STRAIGHTFLUSH: "Sanh-Thung",
      ROYALFLUSH: "Thung_Pha-Sanh"
    };
    this.PokerTextWinner.active = true;
    var animation = this.PokerTextWinner.getComponent(sp.Skeleton);

    if (nameWin == "Sanh-Thung") {
      animation.setAnimation(0, "Sanh", false);
      animation.setAnimation(1, "Thung", false);
    } else if (winningHands[nameWin]) {
      animation.setAnimation(0, winningHands[nameWin], true);
    } else {
      this.PokerTextWinner.active = false;
    }
  },
  eventBack: function eventBack() {
    if (!this.controller.m_tableInfo.m_isGameStart || this.controller.m_tableInfo.m_listActiveUserName.length <= 1) {
      this.requestLeaveRoom();
    } else {
      var isSitOut = true;

      if (this.controller.m_tableInfo.m_listUserSitOut.indexOf(SmartFoxSDK.PokerController.ZoneInstance.mySelf.name) >= 0) {
        isSitOut = false;
      }

      var sitOutRequest = new PokerRequest.SitOutRequest();
      sitOutRequest.setRoomId(this._room.id);
      sitOutRequest.setSitOut(isSitOut);
      SmartFoxSDK.PokerController.ZoneInstance.send(sitOutRequest.toSRequest());
    }
  },
  requestSitOn: function requestSitOn() {
    var myName = SmartFoxSDK.PokerController.ZoneInstance.mySelf.name;

    if (this._getJSPlayerByName(myName) == null) {
      var sitOnRequest = new PokerRequest.SitOnRequest().setRoomId(this._room.id).setAutoSitOn().setBuyIn(this.buy_in);
      SmartFoxSDK.PokerController.ZoneInstance.send(sitOnRequest.toSRequest());
      this.hideDeskEmpty();
    }
  },
  getCommunityCard: function getCommunityCard() {
    return this.CommunityCard.getComponent(this.CommunityCard.name);
  },
  getAction: function getAction() {
    return this.Action.getComponent(this.Action.name);
  },
  setMoneyPot: function setMoneyPot(money) {
    if (money > 0) {
      this.lb_total_bet.string = Utils.formatCurrency(money);
      this.lb_total_bet.node.parent.active = true;
    } else {
      this.lb_total_bet.node.parent.active = false;
    }
  },
  processBetChipToPot: function processBetChipToPot(cb) {
    var betChip = 0; // sum all pot of user to total pot

    for (var i = 0; i < this.controller.m_tableInfo.m_listDesk.length; i++) {
      var desk = this.controller.m_tableInfo.m_listDesk[i];

      var player = this._getJSPlayerById(desk.DeskId);

      if (player) {
        betChip = player.m_total_bet;
        this.controller.m_tableInfo.m_potChip += player.m_total_bet; // reset bet of user

        player.resetBet();
      }
    } // action sum all pot of user to total pot


    this.runActionChipToPot(betChip, function () {
      this.lb_total_bet.string = Utils.formatCurrency(this.controller.m_tableInfo.m_potChip);
      this.lb_total_bet.node.parent.active = true;

      if (cb) {
        cb();
      }
    }.bind(this));
  },
  requestPoolPot: function requestPoolPot() {
    for (var i = 0; i < this.PoolPot.length; i++) {
      if (!this.PoolPot[i].active) {
        this.PoolPot[i].active = true;
        return this.PoolPot[i];
      }
    }

    var pot = cc.instantiate(this.PotPrefab);
    this.node.addChild(pot);
    this.PoolPot.push(pot);
    return pot;
  },
  runActionPotChipToWinner: function runActionPotChipToWinner(moneyWin, winner, cb, target) {
    var player = this._getJSPlayerByName(winner);

    if (player) {
      var pot = this.requestPoolPot();
      var self = this;
      var convertPosBet = this.getPositionInOtherNode(player.BetChip, this.node);
      pot.position = this.lb_total_bet.node.parent.position;
      pot.getChildByName("money").getComponent(cc.Label).string = Utils.formatCurrency(moneyWin);
      pot.runAction(cc.sequence(cc.moveTo(0.5, convertPosBet), cc.callFunc(function () {
        this.active = false;
        self.lb_total_bet.node.parent.active = false;
        if (cb) cb(moneyWin, target);
      }, pot)));
    }
  },
  eventShowChat: function eventShowChat(event, data) {
    this.ChatEmojiLayer.active = !this.ChatEmojiLayer.active;
    if (this.ChatEmojiLayer.active) this.ChatEmojiLayer.getComponent("ChatEmojiLayer").initController(SmartFoxSDK.PokerController.ZoneInstance);
  },
  onPublicMessage: function onPublicMessage(messData) {
    var playerJs = this._getJSPlayerByName(messData.sender.name);

    if (playerJs != null) {
      playerJs.onPublicMessage(messData.msg);
    }
  },
  updateUserVariable: function updateUserVariable(subChip) {
    var jsPlayer = this._getJSPlayerByName(SmartFoxSDK.PokerController.ZoneInstance.mySelf.name);

    jsPlayer.setMoney(GameVariables.Poker.getChip(SmartFoxSDK.PokerController.ZoneInstance.mySelf) - subChip);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xccG9rZXJcXFVJUG9rZXIuanMiXSwibmFtZXMiOlsiY2MiLCJDbGFzcyIsIkJhc2VHYW1lIiwicHJvcGVydGllcyIsIkNoYXRFbW9qaUxheWVyIiwiTm9kZSIsIkFjdGlvbiIsIkNvbW11bml0eUNhcmQiLCJsYl90b3RhbF9iZXQiLCJMYWJlbCIsIlBva2VyVGV4dFdpbm5lciIsIlBvdFByZWZhYiIsIlByZWZhYiIsImJ1eV9pbiIsImJldCIsIlBPU182IiwiUE9TXzkiLCJvbkxvYWQiLCJQb29sUG90IiwiaSIsInBvdCIsImluc3RhbnRpYXRlIiwibm9kZSIsImFkZENoaWxkIiwiYWN0aXZlIiwicHVzaCIsIm9uRW5hYmxlIiwiX2RhdGEiLCJfbnVtYmVyX2Rlc2siLCJudW1iZXJfZGVzayIsIl9yb29tIiwicm9vbSIsInBvc2VzIiwiX0NVUlJFTlRfUE9TIiwiX2NoaWxkcmVuIiwibGVuZ3RoIiwicG9zIiwib24iLCJyZXF1ZXN0U2l0T24iLCJjb3VudE91dCIsIm9uRGlzYWJsZSIsIm5vZGVQbGF5ZXJzIiwicmVtb3ZlQWxsQ2hpbGRyZW4iLCJnZXRDb21tdW5pdHlDYXJkIiwicmVzZXQiLCJoaWRlRGVza0VtcHR5IiwicGFyZW50IiwiaGlkZVBva2VyVGV4dFdpbm5lciIsIldhaXRpbmdUaW1lciIsInJ1bkFjdGlvbkNoaXBUb1BvdCIsImJldENoaXAiLCJjYiIsImNvbnRyb2xsZXIiLCJtX3RhYmxlSW5mbyIsIm1fbGlzdFVzZXIiLCJwbGF5ZXIiLCJfZ2V0SlNQbGF5ZXJCeU5hbWUiLCJjb252ZXJ0UG9zQmV0IiwiZ2V0UG9zaXRpb25Jbk90aGVyTm9kZSIsIkJldENoaXAiLCJyZXF1ZXN0UG9vbFBvdCIsInBvc2l0aW9uIiwiZ2V0Q2hpbGRCeU5hbWUiLCJnZXRDb21wb25lbnQiLCJzdHJpbmciLCJVdGlscyIsImZvcm1hdEN1cnJlbmN5IiwicnVuQWN0aW9uIiwic2VxdWVuY2UiLCJtb3ZlVG8iLCJjYWxsRnVuYyIsImFuaW1hdGlvbiIsInNwIiwiU2tlbGV0b24iLCJzZXRBbmltYXRpb24iLCJzaG93UG9rZXJUZXh0V2lubmVyIiwibmFtZVdpbiIsIndpbm5pbmdIYW5kcyIsIkhJR0hDQVJEIiwiUEFJUiIsIlRXT1BBSVIiLCJUSFJFRU9GQUtJTkQiLCJTVFJBSUdIVCIsIkZMVVNIIiwiRlVMTEhPVVNFIiwiRk9VUk9GQUtJTkQiLCJTVFJBSUdIVEZMVVNIIiwiUk9ZQUxGTFVTSCIsImV2ZW50QmFjayIsIm1faXNHYW1lU3RhcnQiLCJtX2xpc3RBY3RpdmVVc2VyTmFtZSIsInJlcXVlc3RMZWF2ZVJvb20iLCJpc1NpdE91dCIsIm1fbGlzdFVzZXJTaXRPdXQiLCJpbmRleE9mIiwiU21hcnRGb3hTREsiLCJQb2tlckNvbnRyb2xsZXIiLCJab25lSW5zdGFuY2UiLCJteVNlbGYiLCJuYW1lIiwic2l0T3V0UmVxdWVzdCIsIlBva2VyUmVxdWVzdCIsIlNpdE91dFJlcXVlc3QiLCJzZXRSb29tSWQiLCJpZCIsInNldFNpdE91dCIsInNlbmQiLCJ0b1NSZXF1ZXN0IiwibXlOYW1lIiwic2l0T25SZXF1ZXN0IiwiU2l0T25SZXF1ZXN0Iiwic2V0QXV0b1NpdE9uIiwic2V0QnV5SW4iLCJnZXRBY3Rpb24iLCJzZXRNb25leVBvdCIsIm1vbmV5IiwicHJvY2Vzc0JldENoaXBUb1BvdCIsIm1fbGlzdERlc2siLCJkZXNrIiwiX2dldEpTUGxheWVyQnlJZCIsIkRlc2tJZCIsIm1fdG90YWxfYmV0IiwibV9wb3RDaGlwIiwicmVzZXRCZXQiLCJiaW5kIiwicnVuQWN0aW9uUG90Q2hpcFRvV2lubmVyIiwibW9uZXlXaW4iLCJ3aW5uZXIiLCJ0YXJnZXQiLCJzZWxmIiwiZXZlbnRTaG93Q2hhdCIsImV2ZW50IiwiZGF0YSIsImluaXRDb250cm9sbGVyIiwib25QdWJsaWNNZXNzYWdlIiwibWVzc0RhdGEiLCJwbGF5ZXJKcyIsInNlbmRlciIsIm1zZyIsInVwZGF0ZVVzZXJWYXJpYWJsZSIsInN1YkNoaXAiLCJqc1BsYXllciIsInNl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WUFBOUY7QUFDUCxHQXRNSTtBQXVNTHFDLEVBQUFBLGVBdk1LLDJCQXVNV0MsUUF2TVgsRUF1TXFCO0FBQ3RCLFFBQUlDLFFBQVEsR0FBRyxLQUFLaEYsa0JBQUwsQ0FBd0IrRSxRQUFRLENBQUNFLE1BQVQsQ0FBZ0J0QyxJQUF4QyxDQUFmOztBQUNBLFFBQUdxQyxRQUFRLElBQUksSUFBZixFQUFvQjtBQUNoQkEsTUFBQUEsUUFBUSxDQUFDRixlQUFULENBQXlCQyxRQUFRLENBQUNHLEdBQWxDO0FBQ0g7QUFDSixHQTVNSTtBQTZNTEMsRUFBQUEsa0JBN01LLDhCQTZNY0MsT0E3TWQsRUE2TXNCO0FBQ3ZCLFFBQUlDLFFBQVEsR0FBTSxLQUFLckYsa0JBQUwsQ0FBd0J1QyxXQUFXLENBQUNDLGVBQVosQ0FBNEJDLFlBQTVCLENBQXlDQyxNQUF6QyxDQUFnREMsSUFBeEUsQ0FBbEI7O0FBQ0EwQyxJQUFBQSxRQUFRLENBQUNDLFFBQVQsQ0FBa0JDLGFBQWEsQ0FBQ0MsS0FBZCxDQUFvQkMsT0FBcEIsQ0FBNEJsRCxXQUFXLENBQUNDLGVBQVosQ0FBNEJDLFlBQTVCLENBQXlDQyxNQUFyRSxJQUE2RTBDLE9BQS9GO0FBQ0g7QUFoTkksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiY2MuQ2xhc3Moe1xyXG4gICAgZXh0ZW5kczogY2MuQmFzZUdhbWUsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIENoYXRFbW9qaUxheWVyOiBjYy5Ob2RlLFxyXG4gICAgICAgIEFjdGlvbjogY2MuTm9kZSxcclxuICAgICAgICBDb21tdW5pdHlDYXJkOiBjYy5Ob2RlLFxyXG4gICAgICAgIGxiX3RvdGFsX2JldDogY2MuTGFiZWwsXHJcbiAgICAgICAgUG9rZXJUZXh0V2lubmVyOiBjYy5Ob2RlLFxyXG4gICAgICAgIFBvdFByZWZhYjogY2MuUHJlZmFiLFxyXG4gICAgICAgIGJ1eV9pbjogMCxcclxuICAgICAgICBiZXQ6IDUwMCxcclxuICAgICAgICBQT1NfNjogY2MuTm9kZSxcclxuICAgICAgICBQT1NfOTogY2MuTm9kZSxcclxuICAgIH0sXHJcbiAgICBvbkxvYWQoKXtcclxuICAgICAgICAvLyBpbml0IHByZWZhYiBwb3RcclxuICAgICAgICB0aGlzLlBvb2xQb3QgPSBbXTtcclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgOTtpKyspe1xyXG4gICAgICAgICAgICBsZXQgcG90ID0gY2MuaW5zdGFudGlhdGUodGhpcy5Qb3RQcmVmYWIpO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuYWRkQ2hpbGQocG90KTtcclxuICAgICAgICAgICAgcG90LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLlBvb2xQb3QucHVzaChwb3QpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvbkVuYWJsZSgpe1xyXG4gICAgICAgIHRoaXMuYnV5X2luID0gdGhpcy5fZGF0YS5idXlfaW47XHJcbiAgICAgICAgdGhpcy5fbnVtYmVyX2Rlc2sgPSB0aGlzLl9kYXRhLm51bWJlcl9kZXNrO1xyXG4gICAgICAgIHRoaXMuX3Jvb20gPSB0aGlzLl9kYXRhLnJvb207XHJcbiAgICAgICAgdGhpcy5wb3NlcyA9IFtdO1xyXG4gICAgICAgIGlmKHRoaXMuX251bWJlcl9kZXNrID09IDYpe1xyXG4gICAgICAgICAgICB0aGlzLlBPU182LmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuUE9TXzkuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX0NVUlJFTlRfUE9TID0gdGhpcy5QT1NfNjtcclxuICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuUE9TXzYuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuUE9TXzkuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fQ1VSUkVOVF9QT1MgPSB0aGlzLlBPU185O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5fQ1VSUkVOVF9QT1MuX2NoaWxkcmVuLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBsZXQgcG9zID0gdGhpcy5fQ1VSUkVOVF9QT1MuX2NoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2VzLnB1c2godGhpcy5fQ1VSUkVOVF9QT1MuX2NoaWxkcmVuW2ldKTtcclxuICAgICAgICAgICAgcG9zLm9uKFwidG91Y2hlbmRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0U2l0T24oKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHBvcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb3VudE91dCA9IDA7XHJcbiAgICB9LFxyXG4gICAgb25EaXNhYmxlKCl7XHJcbiAgICAgICAgdGhpcy5ub2RlUGxheWVycy5yZW1vdmVBbGxDaGlsZHJlbih0cnVlKTtcclxuICAgICAgICB0aGlzLmdldENvbW11bml0eUNhcmQoKS5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuaGlkZURlc2tFbXB0eSgpO1xyXG4gICAgICAgIHRoaXMubGJfdG90YWxfYmV0Lm5vZGUucGFyZW50LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGlkZVBva2VyVGV4dFdpbm5lcigpO1xyXG4gICAgICAgIHRoaXMuV2FpdGluZ1RpbWVyLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIHJ1bkFjdGlvbkNoaXBUb1BvdChiZXRDaGlwLCBjYil7XHJcbiAgICAgICAgaWYoYmV0Q2hpcCA8PSAwKXtcclxuICAgICAgICAgICAgaWYoY2IpXHJcbiAgICAgICAgICAgICAgICBjYigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRyb2xsZXIubV90YWJsZUluZm8ubV9saXN0VXNlci5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgbGV0IHBsYXllciA9IHRoaXMuX2dldEpTUGxheWVyQnlOYW1lKHRoaXMuY29udHJvbGxlci5tX3RhYmxlSW5mby5tX2xpc3RVc2VyW2ldKTtcclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRQb3NCZXQgPSB0aGlzLmdldFBvc2l0aW9uSW5PdGhlck5vZGUocGxheWVyLkJldENoaXAsIHRoaXMubm9kZSk7XHJcbiAgICAgICAgICAgIGxldCBwb3QgPSB0aGlzLnJlcXVlc3RQb29sUG90KCk7XHJcbiAgICAgICAgICAgIHBvdC5wb3NpdGlvbiA9IGNvbnZlcnRQb3NCZXQ7XHJcbiAgICAgICAgICAgIHBvdC5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICBwb3QuZ2V0Q2hpbGRCeU5hbWUoXCJtb25leVwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IFV0aWxzLmZvcm1hdEN1cnJlbmN5KGJldENoaXApO1xyXG4gICAgICAgICAgICBwb3QucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLm1vdmVUbygwLjMsIHRoaXMubGJfdG90YWxfYmV0Lm5vZGUucGFyZW50LnBvc2l0aW9uKSwgY2MuY2FsbEZ1bmMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmKGNiKVxyXG4gICAgICAgICAgICAgICAgICAgIGNiKCk7XHJcbiAgICAgICAgICAgIH0sIHBvdCkpKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoaWRlUG9rZXJUZXh0V2lubmVyKCl7XHJcbiAgICAgICAgdGhpcy5Qb2tlclRleHRXaW5uZXIuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHRoaXMuUG9rZXJUZXh0V2lubmVyLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbik7XHJcbiAgICAgICAgYW5pbWF0aW9uLnNldEFuaW1hdGlvbigwLCBcIk5PTkVcIiwgZmFsc2UpO1xyXG4gICAgfSxcclxuICAgIHNob3dQb2tlclRleHRXaW5uZXIobmFtZVdpbil7XHJcbiAgICAgICAgbGV0IHdpbm5pbmdIYW5kcyA9IHtcclxuICAgICAgICAgICAgSElHSENBUkQgOiBcIkJhaS1DYW9cIixcclxuICAgICAgICAgICAgUEFJUjogXCJNb3QtRG9pXCIsXHJcbiAgICAgICAgICAgIFRXT1BBSVI6IFwiSGFpLURvaVwiLFxyXG4gICAgICAgICAgICBUSFJFRU9GQUtJTkQ6IFwiWGFtXCIsXHJcbiAgICAgICAgICAgIFNUUkFJR0hUOiBcIlNhbmhcIixcclxuICAgICAgICAgICAgRkxVU0g6IFwiVGh1bmdcIixcclxuICAgICAgICAgICAgRlVMTEhPVVNFOiBcIkN1LUx1XCIsXHJcbiAgICAgICAgICAgIEZPVVJPRkFLSU5EOiBcIlR1LVF1eVwiLFxyXG4gICAgICAgICAgICBTVFJBSUdIVEZMVVNIOiBcIlNhbmgtVGh1bmdcIixcclxuICAgICAgICAgICAgUk9ZQUxGTFVTSDogXCJUaHVuZ19QaGEtU2FuaFwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuUG9rZXJUZXh0V2lubmVyLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHRoaXMuUG9rZXJUZXh0V2lubmVyLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbik7XHJcbiAgICAgICAgaWYobmFtZVdpbiA9PSBcIlNhbmgtVGh1bmdcIil7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5zZXRBbmltYXRpb24oMCwgXCJTYW5oXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLnNldEFuaW1hdGlvbigxLCBcIlRodW5nXCIsIGZhbHNlKTtcclxuICAgICAgICB9ZWxzZSBpZih3aW5uaW5nSGFuZHNbbmFtZVdpbl0pe1xyXG4gICAgICAgICAgICBhbmltYXRpb24uc2V0QW5pbWF0aW9uKDAsIHdpbm5pbmdIYW5kc1tuYW1lV2luXSwgdHJ1ZSk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuUG9rZXJUZXh0V2lubmVyLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG4gICAgZXZlbnRCYWNrKCl7XHJcbiAgICAgICAgaWYoIXRoaXMuY29udHJvbGxlci5tX3RhYmxlSW5mby5tX2lzR2FtZVN0YXJ0IHx8IHRoaXMuY29udHJvbGxlci5tX3RhYmxlSW5mby5tX2xpc3RBY3RpdmVVc2VyTmFtZS5sZW5ndGggPD0gMSl7XHJcbiAgICAgICAgICAgdGhpcy5yZXF1ZXN0TGVhdmVSb29tKCk7XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGxldCBpc1NpdE91dCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY29udHJvbGxlci5tX3RhYmxlSW5mby5tX2xpc3RVc2VyU2l0T3V0LmluZGV4T2YoU21hcnRGb3hTREsuUG9rZXJDb250cm9sbGVyLlpvbmVJbnN0YW5jZS5teVNlbGYubmFtZSkgPj0gMCl7XHJcbiAgICAgICAgICAgICAgICBpc1NpdE91dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBzaXRPdXRSZXF1ZXN0ID0gbmV3IFBva2VyUmVxdWVzdC5TaXRPdXRSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHNpdE91dFJlcXVlc3Quc2V0Um9vbUlkKHRoaXMuX3Jvb20uaWQpO1xyXG4gICAgICAgICAgICBzaXRPdXRSZXF1ZXN0LnNldFNpdE91dChpc1NpdE91dCk7XHJcbiAgICAgICAgICAgIFNtYXJ0Rm94U0RLLlBva2VyQ29udHJvbGxlci5ab25lSW5zdGFuY2Uuc2VuZChzaXRPdXRSZXF1ZXN0LnRvU1JlcXVlc3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlcXVlc3RTaXRPbigpe1xyXG4gICAgICAgIGxldCBteU5hbWUgPSBTbWFydEZveFNESy5Qb2tlckNvbnRyb2xsZXIuWm9uZUluc3RhbmNlLm15U2VsZi5uYW1lO1xyXG4gICAgICAgIGlmKHRoaXMuX2dldEpTUGxheWVyQnlOYW1lKG15TmFtZSkgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIGxldCBzaXRPblJlcXVlc3QgPSBuZXcgUG9rZXJSZXF1ZXN0LlNpdE9uUmVxdWVzdCgpLnNldFJvb21JZCh0aGlzLl9yb29tLmlkKS5zZXRBdXRvU2l0T24oKS5zZXRCdXlJbih0aGlzLmJ1eV9pbik7XHJcbiAgICAgICAgICAgIFNtYXJ0Rm94U0RLLlBva2VyQ29udHJvbGxlci5ab25lSW5zdGFuY2Uuc2VuZChzaXRPblJlcXVlc3QudG9TUmVxdWVzdCgpKTtcclxuICAgICAgICAgICAgdGhpcy5oaWRlRGVza0VtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGdldENvbW11bml0eUNhcmQoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5Db21tdW5pdHlDYXJkLmdldENvbXBvbmVudCh0aGlzLkNvbW11bml0eUNhcmQubmFtZSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QWN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQWN0aW9uLmdldENvbXBvbmVudCh0aGlzLkFjdGlvbi5uYW1lKTtcclxuICAgIH0sXHJcbiAgICBzZXRNb25leVBvdChtb25leSl7XHJcbiAgICAgICAgaWYobW9uZXkgPiAwKXtcclxuICAgICAgICAgICAgdGhpcy5sYl90b3RhbF9iZXQuc3RyaW5nID0gVXRpbHMuZm9ybWF0Q3VycmVuY3kobW9uZXkpO1xyXG4gICAgICAgICAgICB0aGlzLmxiX3RvdGFsX2JldC5ub2RlLnBhcmVudC5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0aGlzLmxiX3RvdGFsX2JldC5ub2RlLnBhcmVudC5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcHJvY2Vzc0JldENoaXBUb1BvdChjYil7XHJcbiAgICAgICAgbGV0IGJldENoaXAgPSAwO1xyXG4gICAgICAgIC8vIHN1bSBhbGwgcG90IG9mIHVzZXIgdG8gdG90YWwgcG90XHJcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY29udHJvbGxlci5tX3RhYmxlSW5mby5tX2xpc3REZXNrLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBsZXQgZGVzayA9IHRoaXMuY29udHJvbGxlci5tX3RhYmxlSW5mby5tX2xpc3REZXNrW2ldO1xyXG4gICAgICAgICAgICBsZXQgcGxheWVyID0gdGhpcy5fZ2V0SlNQbGF5ZXJCeUlkKGRlc2suRGVza0lkKTtcclxuICAgICAgICAgICAgaWYocGxheWVyKXtcclxuICAgICAgICAgICAgICAgIGJldENoaXAgPSBwbGF5ZXIubV90b3RhbF9iZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXIubV90YWJsZUluZm8ubV9wb3RDaGlwICs9IHBsYXllci5tX3RvdGFsX2JldDtcclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IGJldCBvZiB1c2VyXHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIucmVzZXRCZXQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWN0aW9uIHN1bSBhbGwgcG90IG9mIHVzZXIgdG8gdG90YWwgcG90XHJcbiAgICAgICAgdGhpcy5ydW5BY3Rpb25DaGlwVG9Qb3QoYmV0Q2hpcCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLmxiX3RvdGFsX2JldC5zdHJpbmcgPSBVdGlscy5mb3JtYXRDdXJyZW5jeSh0aGlzLmNvbnRyb2xsZXIubV90YWJsZUluZm8ubV9wb3RDaGlwKTtcclxuICAgICAgICAgICAgdGhpcy5sYl90b3RhbF9iZXQubm9kZS5wYXJlbnQuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYoY2Ipe1xyXG4gICAgICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgcmVxdWVzdFBvb2xQb3QoKXtcclxuICAgICAgICBmb3IobGV0IGkgID0gMDsgaSA8IHRoaXMuUG9vbFBvdC5sZW5ndGg7aSsrKXtcclxuICAgICAgICAgICAgaWYoIXRoaXMuUG9vbFBvdFtpXS5hY3RpdmUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5Qb29sUG90W2ldLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5Qb29sUG90W2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwb3QgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLlBvdFByZWZhYik7XHJcbiAgICAgICAgdGhpcy5ub2RlLmFkZENoaWxkKHBvdCk7XHJcbiAgICAgICAgdGhpcy5Qb29sUG90LnB1c2gocG90KTtcclxuICAgICAgICByZXR1cm4gcG90O1xyXG4gICAgfSxcclxuICAgIHJ1bkFjdGlvblBvdENoaXBUb1dpbm5lcihtb25leVdpbiAsIHdpbm5lciwgY2IsIHRhcmdldCl7XHJcbiAgICAgICAgbGV0IHBsYXllciA9IHRoaXMuX2dldEpTUGxheWVyQnlOYW1lKHdpbm5lcik7XHJcbiAgICAgICAgaWYocGxheWVyKXtcclxuICAgICAgICAgICAgbGV0IHBvdCA9IHRoaXMucmVxdWVzdFBvb2xQb3QoKTtcclxuICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBsZXQgY29udmVydFBvc0JldCA9IHRoaXMuZ2V0UG9zaXRpb25Jbk90aGVyTm9kZShwbGF5ZXIuQmV0Q2hpcCwgdGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgcG90LnBvc2l0aW9uID0gdGhpcy5sYl90b3RhbF9iZXQubm9kZS5wYXJlbnQucG9zaXRpb247XHJcbiAgICAgICAgICAgIHBvdC5nZXRDaGlsZEJ5TmFtZShcIm1vbmV5XCIpLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gVXRpbHMuZm9ybWF0Q3VycmVuY3kobW9uZXlXaW4pO1xyXG4gICAgICAgICAgICBwb3QucnVuQWN0aW9uKGNjLnNlcXVlbmNlKGNjLm1vdmVUbygwLjUsIGNvbnZlcnRQb3NCZXQpLCBjYy5jYWxsRnVuYyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sYl90b3RhbF9iZXQubm9kZS5wYXJlbnQuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZihjYilcclxuICAgICAgICAgICAgICAgICAgICBjYihtb25leVdpbiwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgfSwgcG90KSkpXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGV2ZW50U2hvd0NoYXQoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLkNoYXRFbW9qaUxheWVyLmFjdGl2ZSA9ICF0aGlzLkNoYXRFbW9qaUxheWVyLmFjdGl2ZTtcclxuICAgICAgICBpZiAodGhpcy5DaGF0RW1vamlMYXllci5hY3RpdmUpXHJcbiAgICAgICAgICAgIHRoaXMuQ2hhdEVtb2ppTGF5ZXIuZ2V0Q29tcG9uZW50KFwiQ2hhdEVtb2ppTGF5ZXJcIikuaW5pdENvbnRyb2xsZXIoU21hcnRGb3hTREsuUG9rZXJDb250cm9sbGVyLlpvbmVJbnN0YW5jZSk7XHJcbiAgICB9LFxyXG4gICAgb25QdWJsaWNNZXNzYWdlKG1lc3NEYXRhKSB7XHJcbiAgICAgICAgbGV0IHBsYXllckpzID0gdGhpcy5fZ2V0SlNQbGF5ZXJCeU5hbWUobWVzc0RhdGEuc2VuZGVyLm5hbWUpO1xyXG4gICAgICAgIGlmKHBsYXllckpzICE9IG51bGwpe1xyXG4gICAgICAgICAgICBwbGF5ZXJKcy5vblB1YmxpY01lc3NhZ2UobWVzc0RhdGEubXNnKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB1cGRhdGVVc2VyVmFyaWFibGUoc3ViQ2hpcCl7XHJcbiAgICAgICAgbGV0IGpzUGxheWVyICAgID0gdGhpcy5fZ2V0SlNQbGF5ZXJCeU5hbWUoU21hcnRGb3hTREsuUG9rZXJDb250cm9sbGVyLlpvbmVJbnN0YW5jZS5teVNlbGYubmFtZSk7XHJcbiAgICAgICAganNQbGF5ZXIuc2V0TW9uZXkoR2FtZVZhcmlhYmxlcy5Qb2tlci5nZXRDaGlwKFNtYXJ0Rm94U0RLLlBva2VyQ29udHJvbGxlci5ab25lSW5zdGFuY2UubXlTZWxmKS1zdWJDaGlwKVxyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==